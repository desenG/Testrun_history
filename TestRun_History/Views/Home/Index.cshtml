@model TestRun_History.Models.UserProfile
@{
    ViewBag.Title = "Home Page";
}
@section featured {
@*    <section class="featured">
        <div class="content-wrapper">
        </div>
    </section>*@
}


<div id="myQueryManageCenter" ></div>
<br />

<script type="text/javascript">

    Ext.onReady(function () {

        // Init the singleton.  Any tag-based quick tips will start working.
        Ext.QuickTips.init();

        Ext.override(Ext.Panel, {
            // private 
            initEvents: function () {
                if (this.keys) {
                    this.getKeyMap();
                }
                if (this.draggable) {
                    this.initDraggable();
                }
                if (this.resizable) {
                    this.proxy = this.el.createProxy("x-window-proxy");
                    this.proxy.enableDisplayMode('block');
                    this.resizer = new Ext.Resizable(this.el, {
                        minWidth: this.minWidth,
                        minHeight: this.minHeight,
                        handles: this.resizeHandles || "all",
                        pinned: true,
                        resizeElement: this.resizerAction
                    });
                    this.resizer.window = this;
                    this.resizer.on("beforeresize", this.beforeResize, this);
                    this.resizer.on("resize", (this, width, height, e));
                    this.resizable = false;
                }
            },
            // private 
            beforeDestroy: function () {
                Ext.destroy(
            this.resizer,
            this.dd,
            this.proxy
        );
                Ext.Element.uncache(
            this.header,
            this.tbar,
            this.bbar,
            this.footer,
            this.body
        );
            },
            // private 
            resizerAction: function () {
                var box = this.proxy.getBox();
                this.proxy.hide();
                this.window.handleResize(box);
                return box;
            },

            // private 
            beforeResize: function () {
                this.resizer.minHeight = Math.max(this.minHeight, this.getFrameHeight() + 40); // 40 is a magic minimum content size? 
                this.resizer.minWidth = Math.max(this.minWidth, this.getFrameWidth() + 40);
                this.resizeBox = this.el.getBox();
            },

            // private 
            updateHandles: function () {
                if (Ext.isIE && this.resizer) {
                    this.resizer.syncHandleHeight();
                    this.el.repaint();
                }
            },

            // private 
            handleResize: function (box) {
                var rz = this.resizeBox;
                if (rz.x != box.x || rz.y != box.y) {
                    this.updateBox(box);
                } else {
                    this.setSize(box);
                }
                this.focus();
                this.updateHandles();
                this.saveState();
                if (this.ownerCt) {
                    this.ownerCt.doLayout();
                }
                this.fireEvent("resize", this, box.width, box.height);
            }
        });




        //Common


        //#region
        /*grid column header menu - sort columns alphabetically.Used for view result view.*/
        Ext.override(Ext.grid.GridView, {
            beforeColMenuShow: function () {
                // Copy necessary data for the column items to an array
                var cm = this.cm, colCount = cm.getColumnCount();
                var sortedColumns = new Ext.util.MixedCollection();
                for (var i = 0; i < colCount; i++) {
                    if (cm.config[i].hideable !== false) {
                        var columnId = cm.getColumnId(i);
                        sortedColumns.add(columnId,
                                                   {
                                                       id: columnId,
                                                       header: cm.getColumnHeader(i),
                                                       isHidden: cm.isHidden(i)
                                                   });
                    }
                }
                // Sort the column data by column header texts
                sortedColumns.sort('ASC',
                                            function (a, b) {
                                                var headerA = a.header.toLocaleLowerCase();
                                                var headerB = b.header.toLocaleLowerCase();
                                                return headerA.localeCompare(headerB)
                                            });

                this.colMenu.removeAll();

                // finally create the menu items from the sorted column data
                sortedColumns.each(function (columnData) {
                    this.colMenu.add(new Ext.menu.CheckItem({
                        itemId: 'col-' + columnData.id,
                        text: columnData.header,
                        checked: !columnData.isHidden,
                        hideOnClick: false
                    }));
                }, this);
            }

        });


        /*override Window*/
        /*control Window always stay with screen*/
        /*hasnot been used*/
        Ext.override(Ext.Window, {
            listeners: {
                move: function (in_this, x, y) {
                    //max window weight and width, -20 because we always want to see at least small part
                    var maxX = Ext.getBody().getViewSize().width - 20;
                    var maxY = Ext.getBody().getViewSize().height - 20;
                    //new position
                    x = parseInt(x);
                    y = parseInt(y);
                    if (x < 0 || x > maxX || y < 0 || y > maxY) {
                        //fix if moved too far on top/left
                        if (y < 0)
                            y = 0;
                        if (x < 0)
                            x = 0;
                        //fix if moved too far on down/right
                        if (y > maxY)
                            y = maxY - in_this.getHeight();
                        if (x > maxX)
                            x = maxX - in_this.getWidth();
                        //tries to show whole window, if it's too big it will go to left/top corner                 

                        //move window on new position
                        in_this.setPosition(x, y);
                    }
                }
            }
        });

        //////////////////////grouping test 1
        /*function to override Ext.data.Store */
        /*used for add column dynatically */
        Ext.override(Ext.data.Store, {
            addField: function (field) {
                field = new Ext.data.Field(field);
                this.recordType.prototype.fields.replace(field);
                if (typeof field.defaultValue != 'undefined') {
                    this.each(function (r) {
                        if (typeof r.data[field.name] == 'undefined') {
                            r.data[field.name] = field.defaultValue;
                        }
                    });
                }
            },
            removeField: function (name) {
                this.recordType.prototype.fields.removeKey(name);
                this.each(function (r) {
                    delete r.data[name];
                    if (r.modified) {
                        delete r.modified[name];
                    }
                });
            }
        });
        /*function to override Ext.grid.ColumnModel */
        /*used for add column dynatically */
        Ext.override(Ext.grid.ColumnModel, {
            addColumn: function (column, colIndex) {
                if (typeof column == 'string') {
                    column = { header: column, dataIndex: column };
                }
                var config = this.config;
                this.config = [];
                if (typeof colIndex == 'number') {
                    config.splice(colIndex, 0, column);
                } else {
                    colIndex = config.push(column);
                }
                this.setConfig(config);
                return colIndex;
            },
            removeColumn: function (colIndex) {
                var config = this.config;
                this.config = [config[colIndex]];
                config.splice(colIndex, 1);
                this.setConfig(config);
            }
        });
        /*function to override Ext.grid.GridPanel */
        /*used for add column dynatically */
        Ext.override(Ext.grid.GridPanel, {
            addColumn: function (field, column, colIndex) {
                if (!column) {
                    if (field.dataIndex) {
                        column = field;
                        field = field.dataIndex;
                    } else {
                        column = field.name || field;
                    }
                }
                this.store.addField(field);
                return this.colModel.addColumn(column, colIndex);
            },
            removeColumn: function (name, colIndex) {
                this.store.removeField(name);
                if (typeof colIndex != 'number') {
                    colIndex = this.colModel.findColumnIndex(name);
                }
                if (colIndex >= 0) {
                    this.colModel.removeColumn(colIndex);
                }
            }
        });


        /*usefull function to reconize numeric value*/
        /*hasn't been used so far*/
        function isNumeric(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        };
        /*function to format a string as specific form*/
        String.prototype.toHHMMSS = function () {
            var sec_num = parseInt(this, 10); // don't forget the second parm
            var hours = Math.floor(sec_num / 3600);
            var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
            var seconds = sec_num - (hours * 3600) - (minutes * 60);

            //    if (hours < 10) { hours = "0" + hours; }
            //    if (minutes < 10) { minutes = "0" + minutes; }
            //    if (seconds < 10) { seconds = "0" + seconds; }
            var time = hours + ' h ' + minutes + ' m ' + seconds + ' s ';
            return time;
        };
        /*varible referent to the query is selected*/
        var currentQuery;
        /*varible referent to created window which is used to dispaly the detail of a test case*/
        var Win_StepsInfo;
        /* create reusable renderer */
        /* Used in 'FIELD' */
        /* Control display field and value field */
        Ext.util.Format.comboRenderer = function (combo) {
            return function (value) {
                var record = combo.findRecord(combo.valueField, value);
                return record ? record.get(combo.displayField) : combo.valueNotFoundText;
            }
        };
        /*function to load all queries have been created*/
        /*Invoked by  handler of clicking on Delete Query on Query Explorer panel*/
        /*and handler of clicking on Refresh  button on Query Editor Panel*/
        var loadTreeFromDB = function (tree, selectnode) {
            var treeNode = tree.getRootNode();

            Ext.Ajax.request
                        ({
                            url: 'Load_Tree',
                            method: 'GET',
                            success: function (result, request) {

                                if (selectnode != undefined) {
                                    var rootnodes = new Array();
                                    rootnodes.push(selectnode);
                                    findrootnodelist(rootnodes, selectnode);
                                    var paths = new Array();
                                    for (var i = 0; i < rootnodes.length; i++) {
                                        paths.push(rootnodes[i].getPath());
                                    }
                                    treeNode.removeAll(true);
                                    treeNode.appendChild(Ext.decode(result.responseText));
                                    for (var i = 0; i < paths.length; i++) {
                                        tree.expandPath(paths[i]);
                                    }

                                    tree.selectPath(paths[0]);

                                }
                                else {
                                    treeNode.removeAll(true);
                                    treeNode.appendChild(Ext.decode(result.responseText));
                                }
                            },
                            failure: function (result, request) {
                                Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                            }
                        }); //Ajax Load_Tree END
        };

        /*varible referent to Ext.LoadMask object*/
        var loadMask;
        /*set loadingMark when load list or test run history data*/
        var SetloadingMark = function (LoadingMsg) {
            loadMask = new Ext.LoadMask(Ext.getBody(), { msg: LoadingMsg })
            //            var loadMask = new Ext.LoadMask(Ext.getBody(), { msg: 'Wait message' });
            loadMask.show();


        };
        /*int type varible for Page Size of result data  */
        /*used in function loadbyQueryPage_TestRunData  */
        var resultPageSize = 30;
        /*array type varible for recording current Page number in first element,*/
        /*used in function loadbyQueryPage_TestRunData  */
        var currentPage = new Array();
        /*array type varible for recording last Page number in first element,*/
        /*used in function loadbyQueryPage_TestRunData  */
        var lastPage = new Array();

        /*function to load test run history data with page information*/
        /*invoked by function GoToPage and loadbyNodePage_TestRunData*/
        /*invoke loadMask to control dispalying loading mask*/
        var loadbyQueryPage_TestRunData = function (queryString, page) {

            var VResult = Ext.getCmp('queryResultGrid');
            SetloadingMark("Loading result...");
            //    alert(VResult);
            Ext.Ajax.request({
                url: 'LoadPage_TestRunData',
                params:
                {
                    query: queryString,
                    pageSize: resultPageSize,
                    page: page
                },
                //        method: 'GET',
                success: function (result, request) {

                    var jsonData = Ext.decode(result.responseText);




                    VResult.store.loadData(jsonData);
                    ///paging stuff
                    numF_Paging_searchPage.setDisabled(jsonData.PageCount < 2);

                    numF_Paging_PageSize.setDisabled(jsonData.TotalItemCount < 0);

                    btn_Paging_PrePage.setDisabled(!jsonData.HasPreviousPage);

                    btn_Paging_FirstPage.setDisabled(jsonData.IsFirstPage);

                    btn_Paging_LastPage.setDisabled(jsonData.IsLastPage);

                    btn_Paging_NextPage.setDisabled(!jsonData.HasNextPage);

                    lbl_Paging_displayInfo.setText("Displaying "
                                                + jsonData.FirstItemOnpage + " - "
                                                + jsonData.LastItemOnPage + " of "
                                                + jsonData.TotalItemCount);

                    lbl_Paging_TotalPage.setText(jsonData.PageCount);

                    numF_Paging_searchPage.setValue(jsonData.PageNumber);
                    numF_Paging_PageSize.setValue(jsonData.PageSize);
                    currentPage.pop();
                    currentPage.push(jsonData.PageNumber);
                    lastPage.pop();
                    lastPage.push(jsonData.PageCount);

                    loadMask.hide();

                    btn_exportAllButton.setDisabled(false);

                },
                failure: function (result, request) {
                    Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                    loadMask.hide();
                }
            });

        };


        //





        /*generate query string base on clauses*/
        /*used by function loadbyNodePage_TestRunData and GoToPage*/
        function GetQueryString(clauses) {

            var query;
            if (clauses.length > 0) {
                query = "Select * From TestRun_Data Where ";
                for (var i = 0; i < clauses.length; i++)// default sort is ascend base on index-store_queryTree
                {

                    var fieldName = clauses[i].FieldName.replace(/^[ ]+|[ ]+$/g, '');
                    var value; // = clauses[i].Value;
                    var operator = clauses[i].Operator.replace(/^[ ]+|[ ]+$/g, '');
                    var operand;
                    switch (fieldName) {
                        case 'TR_Date_Created':
                        case 'TR_Date_Last_Mod':
                            value = (clauses[i].Value == null) ? new Date().dateFormat('Y-m-d') : clauses[i].Value;

                            break;
                        case 'Estimated_Time':
                        case 'TR_Num':
                        case 'TC_Num':
                            value = (clauses[i].Value == null) ? "null" : clauses[i].Value;
                            break;
                        //                        case '':                                                                                                                                                                                                                                                        


                        //                            break;                                                                                                                                                                                                                                                        
                        default:
                            value = (clauses[i].Value == null) ? "" : clauses[i].Value;


                    }


                    if (i == 0)//index = 0
                    {
                        query += fieldName + " ";

                        if (fieldName != "TR_Num" && fieldName != "TC_Num" && fieldName != "Estimated_Time")//value is string type
                        {


                            switch (operator) {
                                case 'Equal to':
                                    query += "=" + " "
                                                    + "'" + value + "'" + " ";
                                    break;
                                case 'Is not Equal to':
                                    query += "<>" + " "
                                                    + "'" + value + "'" + " ";
                                    break;
                                case 'Contains':
                                    query += "LIKE" + " "
                                                    + "'%" + value + "%'" + " ";
                                    break;
                                case 'Does not Contain':
                                    query += "NOT LIKE" + " "
                                                    + "'%" + value + "%'" + " ";
                                    break;
                                case 'Begins with':
                                    query += "LIKE" + " "
                                                    + "'" + value + "%'" + " ";
                                    break;
                                case 'Does not begin with':
                                    query += "NOT LIKE" + " "
                                                    + "'" + value + "%'" + " ";
                                    break;
                                case 'Ends with':
                                    query += "LIKE" + " "
                                                    + "'%" + value + "'" + " ";
                                    break;
                                case 'Does not end with':
                                    query += "NOT LIKE" + " "
                                                    + "'%" + value + "'" + " ";
                                    break;
                                default: //for date
                                    query += operator + " "
                                                    + "'" + value + "'" + " ";
                                    break;



                            }



                        }
                        else //value type is number
                        {

                            query += operator + " "
                                            + value + " ";
                        }



                    } //index>0
                    else {
                        operand = clauses[i].Operand.replace(/^[ ]+|[ ]+$/g, '')

                        //////////////////////////////////

                        query += operand + " "
                                        + fieldName + " ";

                        if (fieldName != "TR_Num" && fieldName != "TC_Num" && fieldName != "Estimated_Time")//value is string type
                        {
                            switch (operator) {
                                case 'Equal to':
                                    query += "=" + " "
                                                    + "'" + value + "'" + " ";
                                    break;
                                case 'Is not Equal to':
                                    query += "<>" + " "
                                                    + "'" + value + "'" + " ";
                                    break;
                                case 'Contains':
                                    query += "LIKE" + " "
                                                    + "'%" + value + "%'" + " ";
                                    break;
                                case 'Does not Contain':
                                    query += "NOT LIKE" + " "
                                                    + "'%" + value + "%'" + " ";
                                    break;
                                case 'Begins with':
                                    query += "LIKE" + " "
                                                    + "'" + value + "%'" + " ";
                                    break;
                                case 'Does not begin with':
                                    query += "NOT LIKE" + " "
                                                    + "'" + value + "%'" + " ";
                                    break;
                                case 'Ends with':
                                    query += "LIKE" + " "
                                                    + "'%" + value + "'" + " ";
                                    break;
                                case 'Does not end with':
                                    query += "NOT LIKE" + " "
                                                    + "'%" + value + "'" + " ";
                                    break;
                                default: //for others
                                    query += operator + " "
                                                    + "'" + value + "'" + " ";
                                    break;



                            }



                        }
                        else //value type is number
                        {

                            query += operator + " "
                                                     + value + " ";
                        }
                        //////////////////////////////////




                    }
                }
            }
            else {
                query = "Select * From TestRun_Data";
            }


            return query;

        };
        /*load the result data queried by specific query*/
        /*used by double clicking on a query and go to page function*/
        var loadbyNodePage_TestRunData = function (node, page) {

            var grid_queryEditor = Ext.getCmp('queryGrid');
            Ext.Ajax.request
            ({
                url: 'Load_Query',
                params: { id: node.id },
                //            method: 'GET',
                success: function (result, request) {
                    var jsonData = Ext.decode(result.responseText);



                    var clauses = new Array();
                    for (var i = 0; i < jsonData.data.length; i++) {
                        if (jsonData.data[i].FieldName != null) {
                            clauses.push(jsonData.data[i]);
                        }

                    }


                    var query = GetQueryString(clauses);

                    loadbyQueryPage_TestRunData(query, page);

                },
                failure: function (result, request) {
                    Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                }
            });




        };



        /*function to invoke another function(loadbyQueryPage_TestRunData) to load first page of test run history data*/
        /*if the query is unsaved, generate query by using clauses on Query Editor*/
        /*if the query is saved, generate query by using clauses from database*/
        var GoToPage = function (page) {
            if (isUnsavedQuery == true) {

                var thetree = Ext.getCmp('queryTree');

                var clauses = new Array();
                for (var i = 0; i < queryStore.data.items.length; i++) {
                    if (queryStore.data.items[i].data.FieldName != undefined) {
                        clauses.push(queryStore.data.items[i].data);
                    }

                }

                var query = GetQueryString(clauses);

                loadbyQueryPage_TestRunData(query, page);
                //                loadbyNodePage_TestRunData(currentQuery, 1);

            }
            else//isUnsavedQuery == false
            {
                if (currentQuery == undefined) {

                    var thetree = Ext.getCmp('queryTree');

                    var clauses = new Array();
                    for (var i = 0; i < queryStore.data.items.length; i++) {
                        if (queryStore.data.items[i].data.FieldName != undefined) {
                            clauses.push(queryStore.data.items[i].data);
                        }

                    }

                    var query = GetQueryString(clauses);

                    loadbyQueryPage_TestRunData(query, page);
                    //                loadbyNodePage_TestRunData(currentQuery, 1);
                }
                else {

                    loadbyNodePage_TestRunData(currentQuery, page);

                }


            }
            btn_exportAllButton.setDisabled(false);

        };

        //#endregion
        //'Query Explorer' 
        //#region Query Explorer
        //#region Common In Query Explorer
        /*Array for storing all ids of the current queries on Query Explorer Panel*/
        var id_CurrentTreeNodes = [];
        /*to remove all record on Query Editor*/
        /*used in the handler of clicking on refresh button and Delete qury button*/
        var loadEmptyQuery = function (grid) {
            grid.store.removeAll();
        };

        var IsAuthenticated = (('@WebSecurity.IsAuthenticated').toLowerCase() === 'true');

        var IsManager = (('@User.IsInRole("Manager")').toLowerCase() === 'true');
        var IsAdmin = (('@User.IsInRole("Administrator")').toLowerCase() === 'true');
        var AddFolder = function () {
            var thetree = Ext.getCmp('queryTree');
            var selectedNode = thetree.getSelectionModel().getSelectedNode();
            addNodeUnderFolderNode(thetree, selectedNode, "New folder", false);
            btn_DeleteQuery.setDisabled(false);
            btn_appendClause.setDisabled(true);
            btn_excuteQuery.setDisabled(true);
            btn_saveQuery.setDisabled(true);
            btn_saveAsQuery.setDisabled(true);
            btn_cancelChangeQuery.setDisabled(true);
            button_MoveDownClause.setDisabled(true);
            button_MoveUpClause.setDisabled(true);
        };

        var AddQuery = function () {
            var grid = Ext.getCmp('queryGrid');
            currentQuery = undefined;
            isUnsavedQuery = true;
            loadDefaultQuery(grid);
            btn_appendClause.setDisabled(false);
            btn_excuteQuery.setDisabled(false);
            btn_saveQuery.setDisabled(false);
        };

        //#endregion
        //#region Query Explorer
        /*handler of single clicking on a query*/
        /*to load clauses of selected query*/
        /*control button enable*/

        var onTreeNodelClick = function (node, e) {
            /////////////Single click in the Query Explorer should load the query data in the Query Editor but not execute it.

            node.select();

            btn_saveQuery.setDisabled(true);
            btn_cancelChangeQuery.setDisabled(true);
            button_MoveUpClause.setDisabled(true);
            button_MoveDownClause.setDisabled(true);
            button_GroupClauses.setDisabled(true);
            btn_deleteClause.setDisabled(true);

            if (node.id == 1 || node.id == 2 || !IsAuthenticated || (IsTeamQuery(node) && (!IsManager && !IsAdmin))) {
                btn_DeleteQuery.setDisabled(true);
            }
            else {
                btn_DeleteQuery.setDisabled(false);
            }



            if (node.leaf) //node is query
            {
                loadQuery(node);
                currentQuery = node;
                btn_excuteQuery.setDisabled(false);

                if ((IsAuthenticated && !IsTeamQuery(node)) || IsManager || IsAdmin) {
                    btn_appendClause.setDisabled(false);
                    btn_saveAsQuery.setDisabled(false);
                }
                else {
                    btn_appendClause.setDisabled(true);
                    btn_saveAsQuery.setDisabled(true);
                }

            }
            else //node is folder
            {

                var grid = Ext.getCmp('queryGrid');
                loadEmptyQuery(grid);
                btn_excuteQuery.setDisabled(true);
                btn_appendClause.setDisabled(true);
                btn_saveAsQuery.setDisabled(true);
            }







        };
        /*handler of double clicking on a query*/
        /*invoke function to load clauses of the query on Query Editor*/
        /*invoke function to load query result on View Result panel*/
        var onTreeNodeDblClick = function (node, e) {

            node.select();

            btn_saveQuery.setDisabled(true);
            btn_cancelChangeQuery.setDisabled(true);
            button_MoveUpClause.setDisabled(true);
            button_MoveDownClause.setDisabled(true);
            button_GroupClauses.setDisabled(true);
            btn_deleteClause.setDisabled(true);


            if (node.id == 1 || node.id == 2 || !IsAuthenticated || IsTeamQuery(node)) {
                btn_DeleteQuery.setDisabled(true);
            }
            else {
                btn_DeleteQuery.setDisabled(false);
            }



            if (node.leaf) //node is query
            {
                loadQuery(node);
                loadbyNodePage_TestRunData(node, 1);
                currentQuery = node;
                btn_excuteQuery.setDisabled(false);

                if (IsAuthenticated && !IsTeamQuery(node)) {
                    btn_appendClause.setDisabled(false);
                    btn_saveAsQuery.setDisabled(false);
                }
                else {
                    btn_appendClause.setDisabled(true);
                    btn_saveAsQuery.setDisabled(true);
                }

            }
            else //node is folder
            {

                var grid = Ext.getCmp('queryGrid');
                loadEmptyQuery(grid);
                btn_excuteQuery.setDisabled(true);
                btn_appendClause.setDisabled(true);
                btn_saveAsQuery.setDisabled(true);
            }




        };
        /*function to update the name after the query name is edited*/
        var onTreeEditComplete = function (treeEditor, n, o) {

            if (n != o) {
                //    alert(n);

                //do something ...

                var thetree = Ext.getCmp('queryTree');
                var treeNode = thetree.getRootNode();

                var sm = thetree.getSelectionModel();
                var selectnode = thetree.getSelectionModel().getSelectedNode();

                Ext.Ajax.request({
                    url: 'Update_TreeNode',
                    params:
                    {
                        id: selectnode.id, text: n
                    },
                    method: 'POST',
                    success: function (result, request) {

                        btn_saveQuery.setDisabled(true);
                        btn_cancelChangeQuery.setDisabled(true);
                        //Ext.MessageBox.alert('Update Successfully', 'Change has been saved.')

                    },
                    failure: function (result, request) {
                        Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                    }
                });


            }



        };

        /*record model for the node on Query Explorer*/
        /*used in tree reader*/
        var Record_treenode = Ext.data.Record.create
        ([
            {
                name: 'Id',
                type: 'int'
            },
            {
                name: 'text',
                type: 'string'
            },
            {
                name: 'leaf',
                type: 'bool'
            }
        ]);



        /*JsonReader is to read data from store */
        /*used in tree store*/
        var reader_treeNode = new Ext.data.JsonReader
        ({
        }, Record_treenode);
        /*JsonWriter is to write data to store */
        /*used in tree store*/
        var writer_treeNode = new Ext.data.JsonWriter
        ({
            encode: false,
            listful: true,
            writeAllFields: true
        });

        var proxy_treeNode = new Ext.data.HttpProxy
        ({
            api: {
                read: 'Load_Tree',
                create: 'Create_TreeNode',
                update: 'Update_TreeNode',
                destroy: 'Delete_TreeNode'
            },
            headers: { 'Content-Type': 'application/json; charset=UTF-8' }
        });

        var store_queryTree = new Ext.data.Store
        ({

            id: 'store_treeNode',
            recordType: Record_treenode,
            autoLoad: true,
            proxy: proxy_treeNode,
            reader: reader_treeNode,
            writer: writer_treeNode,
            autoSave: false
        });

        /*tree root*/
        var root = new Ext.tree.AsyncTreeNode
        ({
            id: 'root',
            text: 'Root Node',
            nodeType: 'async'
            //    draggable:true,

        });




        /*tree loader to control loading after tree panel is rendered*/
        /*used in Query Explorer tree panel*/
        var Loader_tree =
        new Ext.tree.TreeLoader
        ({
            dataUrl: 'Load_Tree',
            preloadChildren: true
        });

        //#endregion
        //#region Add Query
        /*load default query*/
        /*the default query includes one default record and an empty record*/
        /*used in the handle of clicking "Add query"button*/
        var loadDefaultQuery = function (grid) {

            var defaultRecord = new Clause({ Operand: null, FieldName: 'product', Operator: 'Equal to', Value: 'Idea', Index: 0 });
            var defaultStartRecord = new Clause({ Operand: 'AND', Index: 1 });
            //            var grid = Ext.getCmp('queryGrid');
            grid.store.removeAll();
            grid.store.add(defaultRecord);
            grid.store.add(defaultStartRecord);
            btn_saveQuery.setDisabled(false);
            btn_cancelChangeQuery.setDisabled(true);
            grid.startEditing(1, 0);

        };
        /*the handler of clicking on "Add query"button*/
        /*to load a defauld query on query editor*/
        var btn_AddQuery_click = function () {
            //do something ...
            var grid = Ext.getCmp('queryGrid');
            currentQuery = undefined;
            isUnsavedQuery = true;
            loadDefaultQuery(grid);
            btn_appendClause.setDisabled(false);
            btn_excuteQuery.setDisabled(false);
            btn_saveQuery.setDisabled(false);
        };
        /*"Add query"button*/
        var btn_AddQuery = new Ext.Button
        ({
            text: 'Add',
            tooltip: 'Add query',
            //            iconCls: 'icon-add',
            listeners:
            {
                click: btn_AddQuery_click
            }
        });




        var IsTeamQuery = function (selectnode) {

            var rootnodes = new Array();
            rootnodes.push(selectnode);
            findrootnodelist(rootnodes, selectnode);
            //            alert(rootnodes[rootnodes.length - 2].id);
            if (rootnodes[rootnodes.length - 2].id == 1) {
                return true;
            }
            else {
                return false;
            }
        };


        //#endregion
        //#region Add splitbutton
        // display a dropdown menu:
        var stn_Add = new Ext.SplitButton({
            id: 'stn_Add', // the container id
            text: '--Add--',
            tooltip: 'Click to drop down menu',
            listeners:
        {
            arrowclick: function (SplitButton, e)//optionsHandler, // handle a click on the button itself
            {
                var thetree = Ext.getCmp('queryTree');

                var selectnode = thetree.getSelectionModel().getSelectedNode();

                if (selectnode != null && !selectnode.leaf && (!IsTeamQuery(selectnode) || IsManager || IsAdmin)) {
                    Ext.getCmp("stn_menu_addFolder").setDisabled(false);
                    Ext.getCmp("stn_menu_addQuery").setDisabled(false);
                }
                else {
                    Ext.getCmp("stn_menu_addFolder").setDisabled(true);
                    Ext.getCmp("stn_menu_addQuery").setDisabled(true);
                }
            }
        },
            menu: new Ext.menu.Menu
        ({
            items:
        [
            // these items will render as dropdown menu items when the arrow is clicked:
        {
        id: 'stn_menu_addFolder',
        text: 'Add Folder',
        handler: AddFolder
    },
        {
            id: 'stn_menu_addQuery',
            text: 'Add Query',
            handler: AddQuery
        }
        ]
        })
        });

        //#endregion
        //#region Delete Query
        /*the handler of clicking on "Delete query"button*/
        /*confirmation is provided*/
        /*delete query*/
        var btn_DeleteQuery_click = function (btn, e) {

            var thetree = Ext.getCmp('queryTree');

            var treeNode = thetree.getRootNode();

            var sm = thetree.getSelectionModel();
            var selectnode = thetree.getSelectionModel().getSelectedNode();


            Ext.MessageBox.confirm(
            'Confirm Box', '" ' +
            selectnode.text + ' " will be deleted permanently. ',
            function (buttonText) {
                if (buttonText == "no") {

                }
                if (buttonText == "yes") {



                    if (selectnode != null) {

                        Ext.Ajax.request
                        ({
                            url: 'Delete_TreeNode',
                            params:
                                {
                                    id: selectnode.id
                                },
                            method: 'POST',
                            success: function (result, request) {

                                //                        selectnode.remove();
                                //                        btn_DeleteQuery.setDisabled(true);
                                //                        Ext.MessageBox.alert('Deleted successfully!', 'You have deleted ' + selectnode.text + '.');

                                loadTreeFromDB(thetree, selectnode.parentNode);
                                btn_DeleteQuery.setDisabled(true);
                                var grid = Ext.getCmp('queryGrid');
                                loadEmptyQuery(grid);
                                btn_saveQuery.setDisabled(true);
                                btn_cancelChangeQuery.setDisabled(true);
                                btn_saveAsQuery.setDisabled(true);
                                button_MoveUpClause.setDisabled(true);
                                button_MoveDownClause.setDisabled(true);
                                btn_appendClause.setDisabled(true);
                                btn_excuteQuery.setDisabled(true);
                                btn_deleteClause.setDisabled(true);

                            },
                            failure: function (result, request) {
                                Ext.MessageBox.alert('Failed', 'Please refresh the page and try again.'); // + result.date);
                            }
                        });

                    }
                    else {

                        Ext.MessageBox.alert('Delete failed!', 'Please select a query to delete!');

                    }


                }
            });


        };
        /*"Delete query"button*/
        var btn_DeleteQuery = new Ext.Button
        ({
            text: 'Delete',
            tooltip: 'Delete query',
            disabled: true,
            //            iconCls: 'icon-add',
            listeners:
            {
                click: btn_DeleteQuery_click

            }
        });
        //#endregion
        //#region Refresh
        /*The handler of clicking on Refresh button*/
        /*to invoke another two functions to empty Query Editor and load all queries from DB */
        var btn_RefreshQuery_click = function () {

            currentQuery = undefined;
            var thetree = Ext.getCmp('queryTree');
            var grid = Ext.getCmp('queryGrid');
            loadTreeFromDB(thetree);
            loadEmptyQuery(grid);
            btn_appendClause.setDisabled(true);
            btn_excuteQuery.setDisabled(true);
            btn_saveQuery.setDisabled(true);
            btn_saveAsQuery.setDisabled(true);
            btn_cancelChangeQuery.setDisabled(true);
            button_MoveDownClause.setDisabled(true);
            button_MoveUpClause.setDisabled(true);
            btn_DeleteQuery.setDisabled(true);
        };



        /*Refresh button*/
        var button_RefreshQuery = new Ext.Button
        ({
            text: 'Refresh',
            tooltip: 'Refresh query',
            //            iconCls: 'icon-add',
            listeners:
            {
                click: btn_RefreshQuery_click

            }
        });
        //#endregion
        //#region top Tool bar
        /*top Tool bar on Query Explorer to manage all the button on the panel*/
        var tb_queryTree = new Ext.Toolbar
        ({
            height: 50,
            defaultAlign: 't1-c',
            border: true,
            items:
	        [
                stn_Add,
                {
                    xtype: 'tbspacer'
                },
                '-',
                btn_DeleteQuery,

                {
                    xtype: 'tbspacer'
                },
                '-',
                button_RefreshQuery,

                {
                    xtype: 'tbspacer'
                }
	        ]
        });
        //#endregion
        //#region Context Menu
        /*very important function to add all the last generation node to array rootnodelist */
        /*very array rootnodelist is to store the node itself and his up generation.*/
        /*used in add folder and add query.*/
        function findrootnodelist(rootnodelist, node) {

            if (node.parentNode) {
                rootnodelist.push(node.parentNode);
                findrootnodelist(rootnodelist, node.parentNode);
            }

        };


        /*context menu of query explorer*/
        /*with 3 items-Delete,Add Folder and AddQuery*/
        /*adding a folder is to add a node with leaf = false*/
        /*adding a query open a new query in query editor*/
        /*after adding folder, the new folder is selected.*/
        /*the usability of buttons on the top toolbar of query editor are controlled here*/
        var contextMenu_Tree = new Ext.menu.Menu({
            id: 'contextMenu_Tree',
            items:
                [
                    {
                        id: 'DeleteNode',
                        text: 'Delete'
                    },
                    {
                        id: 'AddFolder',
                        text: 'Add Folder'
                    },
                    {
                        id: 'AddQuery',
                        text: 'Add Query'
                    }
                ],
            listeners: {
                itemclick: function (item) {
                    switch (item.id) {
                        case 'DeleteNode':
                            //                                var n = item.parentMenu.contextNode;
                            //                                if (n.parentNode) {
                            //                                    n.remove();
                            //                                }
                            {
                                var thetree = Ext.getCmp('queryTree');

                                var treeNode = thetree.getRootNode();

                                var sm = thetree.getSelectionModel();
                                var selectnode = thetree.getSelectionModel().getSelectedNode();

                                //                                var rootnodes = new Array();

                                ////                                rootnodes.push(folderNode);
                                //                                findrootnodelist(rootnodes, selectnode);
                                //                                var paths = new Array();
                                //                                for (var i = 0; i < rootnodes.length; i++) {
                                //                                    paths.push(rootnodes[i].getPath());
                                //                                }

                                Ext.MessageBox.confirm(
                                'Confirm Box', '" ' +
                                selectnode.text + ' " will be deleted permanently. ',
                                function (buttonText) {
                                    if (buttonText == "no") {

                                    }
                                    if (buttonText == "yes") {



                                        if (selectnode != null) {


                                            Ext.Ajax.request
                                            ({
                                                url: 'Delete_TreeNode',
                                                params:
                                                    {
                                                        id: selectnode.id
                                                    },
                                                method: 'POST',
                                                success: function (result, request) {

                                                    //                        selectnode.remove();
                                                    //                        btn_DeleteQuery.setDisabled(true);
                                                    //                        Ext.MessageBox.alert('Deleted successfully!', 'You have deleted ' + selectnode.text + '.');

                                                    loadTreeFromDB(thetree, selectnode.parentNode);
                                                    //                                                    thetree.expandAll();
                                                    //                                                    thetree.expandPath(paths[0]);
                                                    //                                                    thetree.expandPath(paths[1]);
                                                    //                                                    for (var i = 1; i < paths.length; i++) {
                                                    //                                                        thetree.expandPath(paths[i]);
                                                    //                                                    }

                                                    btn_DeleteQuery.setDisabled(true);
                                                    var grid = Ext.getCmp('queryGrid');
                                                    loadEmptyQuery(grid);
                                                    btn_saveQuery.setDisabled(true);
                                                    btn_cancelChangeQuery.setDisabled(true);
                                                    btn_saveAsQuery.setDisabled(true);
                                                    button_MoveUpClause.setDisabled(true);
                                                    button_MoveDownClause.setDisabled(true);
                                                    btn_appendClause.setDisabled(true);
                                                    btn_excuteQuery.setDisabled(true);
                                                    btn_deleteClause.setDisabled(true);

                                                },
                                                failure: function (result, request) {
                                                    Ext.MessageBox.alert('Failed', 'Please refresh the page and try again.'); // + result.date);
                                                }
                                            });

                                        }
                                        else {

                                            Ext.MessageBox.alert('Delete failed!', 'Please select a query to delete!');

                                        }


                                    }
                                });



                            }

                            break;
                        case 'AddFolder':
                            {
                                var thetree = Ext.getCmp('queryTree');
                                var selectedNode = thetree.getSelectionModel().getSelectedNode();
                                addNodeUnderFolderNode(thetree, selectedNode, "New folder", false);
                                btn_DeleteQuery.setDisabled(false);
                                btn_appendClause.setDisabled(true);
                                btn_excuteQuery.setDisabled(true);
                                btn_saveQuery.setDisabled(true);
                                btn_saveAsQuery.setDisabled(true);
                                btn_cancelChangeQuery.setDisabled(true);
                                button_MoveDownClause.setDisabled(true);
                                button_MoveUpClause.setDisabled(true);


                            }

                            break;
                        case 'AddQuery':
                            var grid = Ext.getCmp('queryGrid');
                            currentQuery = undefined;
                            isUnsavedQuery = true;
                            loadDefaultQuery(grid);
                            btn_saveAsQuery.setDisabled(true);
                            btn_appendClause.setDisabled(false);
                            btn_excuteQuery.setDisabled(false);
                            btn_saveQuery.setDisabled(false);
                            break;
                    }
                }
            }
        });

        /*function to control context menu of query explorer*/
        /*disable “delete” button if the node is top root. */
        /*Disable “add folder” and “add query” is the node is a query */
        /*but enable these two if the node is folder.*/
        var onContextMenu_Tree = function (node, e) {
            try {

                //          Register the context node with the menu so that a Menu Item's handler function can access
                //          it via its parentMenu property.
                node.select();
                var c = node.getOwnerTree().contextMenu;
                c.contextNode = node;
                c.showAt(e.getXY());







                if (node.id == 1 || node.id == 2 || !IsAuthenticated || (IsTeamQuery(node) && !IsManager && !IsAdmin)) {
                    Ext.getCmp('contextMenu_Tree').items.items[0].setDisabled(true);
                }
                else {
                    Ext.getCmp('contextMenu_Tree').items.items[0].setDisabled(false);
                }

                if (node.leaf || (IsTeamQuery(node) && !IsManager && !IsAdmin)) {
                    Ext.getCmp('contextMenu_Tree').items.items[1].setDisabled(true);
                    Ext.getCmp('contextMenu_Tree').items.items[2].setDisabled(true);
                }
                else {
                    Ext.getCmp('contextMenu_Tree').items.items[1].setDisabled(false);
                    Ext.getCmp('contextMenu_Tree').items.items[2].setDisabled(false);
                }
                //                if (node.id == 1 || node.id == 2) {
                //                    Ext.getCmp('contextMenu_Tree').items.items[0].setDisabled(true); 
                //                }
                //                else
                //                    if (!IsTeamQuery(node)) {
                //                        if (node.leaf) //is query
                //                        {
                //                            Ext.getCmp('contextMenu_Tree').items.each(
                //                        function (item) {
                //                            if (item.id != "DeleteNode") {
                //                                item.setDisabled(true);
                //                            }
                //                            else {
                //                                item.setDisabled(false);
                //                            }
                //                        });
                //                        }
                //                        else //is folder
                //                        {
                //                            Ext.getCmp('contextMenu_Tree').items.each(
                //                            function (item) {
                //                                item.setDisabled(false); // your condition here
                //                            });
                //                        }
                //                    }
                //                    else {
                //                        Ext.getCmp('contextMenu_Tree').items.each(
                //                            function (item) {
                //                                item.setDisabled(true); // your condition here
                //                            });
                //                    }
                //                if (IsTeamQuery(selectnode)) {
                //                    Ext.getCmp("stn_menu_addFolder").setDisabled(true);
                //                    Ext.getCmp("stn_menu_addQuery").setDisabled(true);
                //                }
                //                else {
                //                    Ext.getCmp("stn_menu_addFolder").setDisabled(false);
                //                    Ext.getCmp("stn_menu_addQuery").setDisabled(false);
                //                }
            }
            catch (ex) {
                alert(ex.message);
            }
        };

        //#endregion

        //#endregion
        //'Query Editor' 
        //#region Query Editor      
        //#region Common In Query Editor
        /* handler for selecting a value in combobox*/
        /*used by editor_ListCombofield_Operand */
        /*used by editor_ListCombo_field */
        /*used by editor_operator_ComboBox */
        /*used by editor_value_ComboBox */
        var fieldSelected = function (combo, record, index) {
            var grid = Ext.getCmp('queryGrid');
            grid.stopEditing();
        };

        /*  function to delete specific record from specific grid panel     */
        /*  used in the handler for clicking 'Delete Clause' button,  clean Query Editor when Save editing query
        And  Delete action of 'Delete' item in context menu      */
        /*  used to delete selected record      */
        var deleteClause = function (thegrid, record) {
            //            var thegrid = Ext.getCmp('queryGrid');
            //            var record = thegrid.getStore().getAt(rowIndex);
            //            var record = thegrid.getSelectionModel().getSelected(); //get selected row
            var rowIndex = thegrid.store.indexOf(record);


            //remove selected record from the grid
            thegrid.store.remove(record);

            for (var i = rowIndex; i < thegrid.store.data.length; i++) {
                thegrid.getStore().getAt(i).set('Index', i);
                thegrid.getStore().getAt(i).commit();
            }


            var firstRow = thegrid.getStore().getAt(0);

            // set the value (shows dirty flag):
            firstRow.set('Operand', null);
            // commit the change (removes dirty flag):
            firstRow.commit();
        };




        /*  function to load the clauses of a specific query     */
        /*  used in the handler for clicking 'Cancel change' button, single clicking on Tree Nodel, and double clicking  on Tree Node*/
        var loadQuery = function (node) {
            var grid_queryEditor = Ext.getCmp('queryGrid');
            Ext.Ajax.request
            ({
                url: 'Load_Query',
                params: { id: node.id },
                //            method: 'GET',
                success: function (result, request) {
                    var jsonData = Ext.decode(result.responseText);

                    grid_queryEditor.store.loadData(jsonData);

                },
                failure: function (result, request) {
                    Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                }
            });

        };
        /*  state varible to mark if current query is unsaved     */
        /*  set to false in handler for clicking on button "Create New Query"*/
        /*  set to false in handler for clicking on button "Save Query"*/
        /*  set to true in handler of after editing Query Editor*/
        /*  set to false in handler for clicking on buttonbtn "Add Query"*/
        /*used in function GoToPage; if the query is unsaved, query data by using clause on Query Eitor*/
        /*if the query is saved, query data by using clause on database */
        var isUnsavedQuery = true;
        /*store model with one field*/
        /*used by Operater combobox editor and Value ComboBox editor*/
        var store_value = new Ext.data.ArrayStore({
            // store configs
            storeId: 'store_value',
            // reader configs
            fields: ['value']
        });

        /*function to move selected row of specific grid panel to specific direction*/
        /*used by the handler of clicking "Move Up"button and "Move down"button*/
        function moveSelectedRow(grid, direction) {
            var record = grid.getSelectionModel().getSelected();
            if (!record) {
                return;
            }
            var index = grid.getStore().indexOf(record);
            if (direction < 0) {
                index--;
                if (index < 0) {
                    return;
                }
            } else {
                index++;
                if (index >= grid.getStore().getCount()) {
                    return;
                }
            }
            grid.getStore().remove(record);
            grid.getStore().insert(index, record);
            grid.getSelectionModel().selectRow(index, true);
        };
        /*function to update row index of specific grid panel*/
        /*used by the handler of clicking "Move Up"button and "Move down"button*/
        function updateGridRecordIndex(grid) {
            for (var i = 0; i < grid.store.data.length; i++) {
                grid.getStore().getAt(i).set('Index', i);
                grid.getStore().getAt(i).commit();
            }

        };
        /*function to update the value of Operand of specific grid panel*/
        /*used by the handler of clicking "Move Up"button and "Move down"button*/
        function updateGridRecordOperand(grid) {
            var firstRow = grid.getStore().getAt(0);
            firstRow.set('Operand', null);
            firstRow.commit();
            var secondRow = grid.getStore().getAt(1);
            if (secondRow.Operand == undefined) {
                secondRow.set('Operand', "AND");
                secondRow.commit();
            }

        };

        //#endregion
        //#region New query Window

        //#region TextField for name
        /*handler for validating query name TextField*/
        /*enable button 'Create New Query' if the name is valid*/
        var handler_valid_txtf_newQueryName = function (txtField) {
            btn_newQuery.setDisabled(false);
        };
        /*handler for validating query name TextField*/
        /*disable button 'Create New Query' if the name is invalid*/
        var handler_invalid_txtf_newQueryName = function (txtField, msg) {
            btn_newQuery.setDisabled(true);
        };


        /*TextField for enter the name of New Query*/
        var txtf_newQueryName = new Ext.form.TextField({
            id: 'txtf_newQueryName',
            xtype: 'textfield',
            fieldLabel: 'Query Name',
            allowBlank: false,
            selectOnFocus: true,
            value: 'new query',
            region: 'center',
            listeners:
                    {
                        valid: handler_valid_txtf_newQueryName,
                        invalid: handler_invalid_txtf_newQueryName
                    }


        });
        //#endregion
        //#region Create New Query button
        /*function to find differences for two arrays*/
        /*used in GetCurrentNode function*/
        function diffArray(a, b) {
            var seen = [], diff = [];
            for (var i = 0; i < b.length; i++)
                seen[b[i]] = true;
            for (var i = 0; i < a.length; i++)
                if (!seen[a[i]])
                    diff.push(a[i]);
            return diff;
        };

        /*function to find the query just created by comparing the change on two id lists*/
        /*used in handler of clicking on "Create new query button" on new query window*/
        var GetCurrentNode = function (newAllNodes, ids_CurrentTreeNodes) {
            var id_newAllNodes = [];
            var TheCurrentNode;
            for (var i = 0; i < newAllNodes.length; i++) {
                id_newAllNodes.push(newAllNodes[i].id)

            }



            var x = diffArray(id_newAllNodes, ids_CurrentTreeNodes);

            for (var i = 0; i < newAllNodes.length; i++) {
                newAllNodes[i].id = x[0];
                TheCurrentNode = newAllNodes[i];
            }

            return TheCurrentNode;

        };

        /* Function to update clauses of current query      */
        /* parameter is a clause object      */
        /* used to save changes on existing query or create a new query     */
        var updatequery = function (ob) {
            Ext.Ajax.request
            ({
                url: 'Update_Query',
                params:
                    {
                        "ClauseID": ob.data.ClauseID,
                        "FieldName": ob.data.FieldName,
                        "fieldType": ob.data.fieldType,
                        "Index": ob.data.Index,
                        "Operand": ob.data.Operand,
                        "Operator": ob.data.Operator,
                        "Value": ob.data.Value,
                        "QueryID": currentQuery.id

                    },
                method: 'POST',
                success: function (result, request) {

                    //            Ext.MessageBox.alert('Save query successfully!', 'You have save one node.');



                },
                failure: function (result, request) {
                    Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                }
            });
        };
        /* Function to remove any empty clause on Query Editor      */
        /* used to save changes on existing query or create a new query     */
        var cleanQueryEditor = function () {
            var thegrid = Ext.getCmp('queryGrid');
            var thestore = thegrid.getStore();
            var emptyRecord = new Array();
            for (var i = 0; i < thestore.data.items.length; i++) {
                if (thestore.data.items[i].data.FieldName == undefined) {
                    emptyRecord.push(thestore.getAt(i));
                }
            }

            if (emptyRecord.length > 0) {
                //delete empty record
                for (var i = 0; i < emptyRecord.length; i++) {

                    deleteClause(thegrid, emptyRecord[i]);

                }

            }
        };

        /*general function to add a node under selected folder*/
        /*used to add a new folder and add a new query*/
        /*as well, it is used to save as an existing query*/
        /*if new query is added, currentquery will be assigned by it.*/
        var addNodeUnderFolderNode = function (tree, folderNode, name, Isleaf) {
            var treeNode = tree.getRootNode();
            var rootnodes = new Array();

            rootnodes.push(folderNode);
            findrootnodelist(rootnodes, folderNode);
            var paths = new Array();
            for (var i = 0; i < rootnodes.length; i++) {
                paths.push(rootnodes[i].getPath());
            }

            var siblingnode_list = folderNode.childNodes;
            var id_siblingnode_list = new Array(); //the siblings of the creating node 
            for (var i = 0; i < siblingnode_list.length; i++) {
                id_siblingnode_list.push(siblingnode_list[i].id);

            }


            Ext.Ajax.request
            ({
                url: 'Create_TreeNode',
                params:
                    {
                        Name: name, leaf: Isleaf, FolderID: folderNode.id, createBy: '@Model.UserId'
                    },
                method: 'POST',
                success: function (result, request) {



                    Ext.Ajax.request
                                ({
                                    url: 'Load_Tree',
                                    method: 'GET',
                                    success: function (result, request) {
                                        treeNode.removeAll(true);
                                        treeNode.appendChild(Ext.decode(result.responseText));

                                        for (var i = 0; i < paths.length; i++) {
                                            tree.expandPath(paths[i]);
                                        }

                                        tree.selectPath(paths[0]);
                                        var fatherNode = tree.getSelectionModel().getSelectedNode();

                                        var childNodes = fatherNode.childNodes;
                                        var id_childNodes_list = new Array();
                                        for (var i = 0; i < childNodes.length; i++) {
                                            id_childNodes_list.push(childNodes[i].id);
                                        }

                                        var id_newNode = diffArray(id_childNodes_list, id_siblingnode_list);

                                        tree.getNodeById(id_newNode).select();
                                        if (Isleaf) {
                                            currentQuery = tree.getNodeById(id_newNode);

                                            if (currentQuery != undefined) {
                                                cleanQueryEditor();
                                                for (var i = 0; i < queryStore.data.items.length; i++) {

                                                    updatequery(queryStore.data.items[i]);

                                                }
                                            }
                                        }
                                        else {
                                            currentQuery = undefined;
                                        }
                                    },
                                    failure: function (result, request) {
                                        Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                                    }
                                }); //Ajax Load_Tree END
                },
                failure: function (result, request) {
                    Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                } //Ajax Create_TreeNode END
            });
        };

        /* Handler for clicking on "Create New Query" button    */
        /* Create new query and save as a existing query   */
        /* load all queries created    */
        /* select the query just created    */
        var handler_click_btn_newQuery = function () {



            var thetree = Ext.getCmp('queryTree');
            var selectedNode = thetree.getSelectionModel().getSelectedNode();
            var Win = Ext.getCmp('Win_newquery');
            var newQueryName = Ext.getCmp('txtf_newQueryName').el.dom.value;

            if (!selectedNode.leaf) {
                addNodeUnderFolderNode(thetree, selectedNode, newQueryName, true);
            }
            else {
                addNodeUnderFolderNode(thetree, selectedNode.parentNode, newQueryName, true);
            }





            Win.hide();
            isUnsavedQuery = false;
            btn_DeleteQuery.setDisabled(false);
            btn_appendClause.setDisabled(false);
            btn_excuteQuery.setDisabled(false);
            btn_saveQuery.setDisabled(true);
            btn_saveAsQuery.setDisabled(false);
            btn_cancelChangeQuery.setDisabled(true);
            button_MoveDownClause.setDisabled(true);
            button_MoveUpClause.setDisabled(true);


        };

        /* "Create New Query" button    */
        var btn_newQuery = new Ext.Button
        ({
            text: 'Save', //Create New Query
            tooltip: 'Create New Query',
            //only enabled once the form is valid
            disabled: true,
            listeners:
                    {
                        click: handler_click_btn_newQuery
                    }
        });





        //#endregion
        //#region newquery Form 
        /* used to place New Query Name text field and create new query button*/
        /* it is on new query window*/
        var Form_newquery = new Ext.FormPanel({
            height: 100,
            id: 'Form_newquery',
            layout: 'border',    // specify a layout!
            items:
            [
                txtf_newQueryName
            ],
            // Reset and Submit buttons
            buttons:
            [
                btn_newQuery
            ]

        });
        //#endregion
        //#region New query Window
        var Win_newquery = new Ext.Window({
            id: 'Win_newquery',
            title: 'Save Query As',
            modal: true, // <-- breaks parents modal 
            //state if sub window is modal, 
            //in addition the sub window is 
            //not properly modal because the 
            //parent window is not blocked
            closable: true,
            closeAction: 'hide',
            width: 350,
            //    width: 600,
            //    minWidth: 350,
            //    height: 350,
            //    layout: 'border',
            //    bodyStyle: 'padding: 5px;',
            style: {
                border: '1px solid #fff'
            },
            items:
            [
                Form_newquery
            ]

        });
        //#endregion


        //#endregion
        //#region Operand




        /* create the ComboBox type editor */
        var editor_ListCombofield_Operand = new Ext.form.ComboBox
        ({
            //            id: 'id',
            valueField: 'id',
            displayField: 'id',
            store: ['AND', 'OR'],  //what do I store here?? 
            value: 'OR',
            triggerAction: 'all',
            forceSelection: true,
            listeners:
            {
                select: fieldSelected
            }
        });
        //#endregion
        //#region FIELD
        /*data for 'FIELD'        */
        var data_field =
        [
                ['Build', 'Build'],
                ['TR_Created_By', 'Created By'],
                ['TR_Date_Created', 'Date Created'],
                ['TR_Date_Last_Mod', 'Date Modified'],
                ['Estimated_Time', 'Estimated Time'],
                ['Folders', 'Folders'],
                ['Flavour', 'Flavour'],
                ['T_Feature_ID', 'Feature ID'],
                ['isAutomated', 'IsAutomated'],
                ['env_IDEA_Encoding', 'IDEA Encoding'],
                ['Language', 'Language'],
                ['TR_Last_Mod_By', 'Last Modified By'],
                ['T_Main_Component', 'Main Component'],
                ['T_Status', 'Status'],
                ['T_Summary', 'Summary'],
                ['TR_Num', 'Test Run Number'],
                ['TC_Num', 'Test Case Number'],
                ['T_Type', 'Type'],
                ['Task', 'Task'],
                ['env_OS', 'OS'],
                ['product', 'Product'],
                ['ProblemStatement', 'Problem Statement'],
                ['PartialFailNotes', 'Partial Fail Notes'],
                ['env_User_Type', 'User Type'],
                ['T_Variants', 'Variants']
        ];
        /*store for 'FIELD'        */
        var store_field = new Ext.data.ArrayStore
        ({

            fields:
            [
                           'ID',
                    'FieldName'
            ],
            reader: new Ext.data.ArrayReader
            ({
                idIndex: 0  // id for each record will be the first element
            })

        });



        /*load 'FIELD' store with the 'FIELD' data        */
        store_field.loadData(data_field, false);


        store_field.singleSort('FieldName', 'ASC');

        /*Combobox type Editor for 'FIELD'  column      */
        var editor_ListCombo_field = new Ext.form.ComboBox({

            id: 'editor_ListCombo_field',
            typeAhead: true,
            triggerAction: 'all',

            forceSelection: true,
            lazyRender: true,
            mode: 'local',
            store: store_field,
            valueField: 'ID',
            displayField: 'FieldName',
            listeners:
            {
                select: fieldSelected
            }

        });
        /*  NumberField type editor      */
        /*  used by value column      */
        /*  It is added to value column when VALUE column is clicked if 'FIELD' value is 'test run number' and 'test case number' and so on */
        var editor_numberfield = new Ext.form.NumberField({
            allowBlank: false,
            allowNegative: false,
            maxValue: 100000
        });


        //#endregion
        //#region OPERATOR
        /*data list*/
        /*it is loaded to store_value when "OPERATOR" column is clicked if the operator is used for number or date */
        var data_editor_operator_date =
        [
            ["="],
            ["<>"],
            [">"],
            ["<"],
            [">="],
            ["<="]
        ];

        /*data list*/
        /*it is loaded to store_value when "OPERATOR" column is clicked if the operator is used for text */
        var data_editor_operator_text =
        [
            ["Equal to"],
            ["Is not Equal to"],
            ["Contains"],
            ["Does not Contain"],
            ["Begins with"],
            ["Does not begin with"],
            ["Ends with"],
            ["Does not end with"]
        ];
        /*data list*/
        /*it is loaded to store_value when "OPERATOR" column is clicked if the operator is used for dropdown list */
        var data_editor_operator_dropdown =
        [
            ["Equal to"]
        ];





        /*combobox type editor*/
        /*used on "OPERATOR"column*/
        /*set as editor of "OPERATOR"*/
        var editor_operator_ComboBox = new Ext.form.ComboBox
        ({
            id: 'editor_operator_ComboBox',
            mode: 'local',
            valueField: 'value',
            displayField: 'value',
            store: 'store_value',
            triggerAction: 'all',
            forceSelection: true,
            listeners:
            {
                select: fieldSelected
            }
        });
        //#endregion
        //#region VALUE
        /*  DateField type editor      */
        /*  used by VALUE column      */
        /*  It is added to VALUE column when value column is clicked if 'FIELD' value is 'date create' and 'date modified' */
        var editor_valueDateField = new Ext.form.DateField({
            id: "editor_valueDateField",
            format: 'Y-m-d'
        });
        /*combobox type editor*/
        /*it is set as the editor on VALUE column if the the value of FIELD is a list from database*/
        /*it would load different data to its store base on the FIELD*/
        /*tool tip to show full name of the item*/
        var editor_value_ComboBox = new Ext.form.ComboBox
        ({
            id: 'editor_value_ComboBox',
            //            tpl: new Ext.XTemplate(
            //                '<tpl for="."><div ext:qtip={value} class="x-combo-list-item">{value}</div></tpl>'), //'<tpl for="."><div ext:qtip={value} class="x-combo-list-item">{value}</div></tpl>',
            mode: 'local',
            valueField: 'value',
            displayField: 'value',
            store: 'store_value',
            typeAhead: true,
            listWidth: 400,
            triggerAction: 'all',
            forceSelection: true,
            emptyText: 'Select a value...',
            selectOnFocus: true,
            width: 300,
            listeners:
            {
                select: fieldSelected
            }
        });
        /*data is to save list of  test run creater*/
        /*load list of  test run creater when "VALUE"column is clicked if the value of "FIELD" column is "create by" */
        /*loaded as the data for the store of combobox type in specific condition*/
        var data_editor_value_RunCreater = new Array();
        /*data is to save list of  test run modifier*/
        /*load list of  test run modifier when "VALUE"column is clicked if the value of "FIELD" column is "Last Modified By" */
        /*loaded as the data for the store of combobox type in specific condition*/
        var data_editor_value_LastModifiedBy = new Array();
        /*data is to save list of  IDEA Version*/
        /*loaded as the data for the store of combobox type when "VALUE"column is clicked if the value of "FIELD" column is "IDEA Encoding"*/
        var data_editor_value_IDEAVersion = //         new Array();
        [
            ["ASCII"],
            ["ASCII Server"],
            ["ASCII Update"],
            ["Unicode"],
            ["Unicode Server"],
            ["Unicode Update"]
        ];
        /*data is to save list of  OS*/
        /*load list of  OS when "VALUE"column is clicked if the value of "FIELD" column is "OS" */
        /*loaded as the data for the store of combobox type in specific condition*/
        var data_editor_value_OS = new Array();
        /*data is to save list of  User Type*/
        /*loaded as the data for the store of combobox type when "VALUE"column is clicked if the value of "FIELD" column is "User Type"*/
        var data_editor_value_UserType = //        new Array();
        [
            ["Administrator"],
            ["Restricted User"]
        ];
        /*data is to save list of  Main Component*/
        /*load list of  OS when "VALUE"column is clicked if the value of "FIELD" column is "Main Component" */
        /*loaded as the data for the store of combobox type in specific condition*/
        var data_editor_value_MainComponent = new Array();
        /*data is to save list of  Feature ID*/
        /*load list of  OS when "VALUE"column is clicked if the value of "FIELD" column is "Feature ID" */
        /*loaded as the data for the store of combobox type in specific condition*/
        var data_editor_value_FeatureID = new Array();
        /*data is to save list of  Status*/
        /*loaded as the data for the store of combobox type when "VALUE"column is clicked if the value of "FIELD" column is "Status"*/
        var data_editor_value_Status = //        new Array();
        [
            ["Failed"],
            ["In Progress"],
            ["On Hold"],
            ["Partially Failed"],
            ["Passed"],
            ["Waiting"]
        ];

        /*data is to save list of  Task*/
        /*load list of  OS when "VALUE"column is clicked if the value of "FIELD" column is "Task" */
        /*loaded as the data for the store of combobox type in specific condition*/
        var data_editor_value_Task = new Array();
        /*data is to save list of  Flavou*/
        /*load list of  OS when "VALUE"column is clicked if the value of "FIELD" column is "Flavour" */
        /*loaded as the data for the store of combobox type in specific condition*/
        var data_editor_value_Flavour = new Array();
        /*data is to save list of  Product*/
        /*loaded as the data for the store of combobox type when "VALUE"column is clicked if the value of "FIELD" column is "Product"*/
        var data_editor_value_Product =
        [
            ["Idea"],
            ["Monitor"]
        ];
        /*data is to save list of  isAutomated*/
        /*loaded as the data for the store of combobox type when "VALUE"column is clicked if the value of "FIELD" column is "isAutomated"*/
        var data_editor_value_isAutomated =
        [
            ["true"],
            ["false"]
        ];


        /*data is to save list of  Test Type*/
        /*load list of  OS when "VALUE"column is clicked if the value of "FIELD" column is "Test Type" */
        /*loaded as the data for the store of combobox type in specific condition*/
        var data_editor_value_TestType = new Array();
        /*data is to save list of  Language*/
        /*load list of  OS when "VALUE"column is clicked if the value of "FIELD" column is "Language" */
        /*loaded as the data for the store of combobox type in specific condition*/
        var data_editor_value_Language = new Array();
        /*generic function to load list on the combobox editor for "VALUE"column with loading mask*/
        /*used by functions loadLanguageList, loadTestType, loadTestFeatureID, 
        loadEnv_IDEA_Encoding, loadEnv_OS, loadEnv_User_Type,loadT_Status,loadCreatedBy,
        loadLast_Mod_By,loadMain_Component,loadTask,loadFlavour*/
        var loadList = function (DATA, URL, LoadingMsg) {

            if (DATA.length == 0) {
                editor_value_ComboBox.setDisabled(true);
                SetloadingMark(LoadingMsg);

                Ext.Ajax.request({
                    url: URL,
                    success: function (result, request) {

                        var jsonData = Ext.decode(result.responseText);




                        for (var i = 0; i < jsonData.data.length; i++) {
                            var x = new Array();
                            x[0] = jsonData.data[i];
                            DATA.push(x);
                        }
                        loadMask.hide();
                        var grid = Ext.getCmp('queryGrid');
                        grid.stopEditing();
                        editor_value_ComboBox.setDisabled(false);

                    },
                    failure: function (result, request) {
                        Ext.MessageBox.alert('Failed', 'Please try again. '); // + result.date);
                        loadMask.hide();
                        var grid = Ext.getCmp('queryGrid');
                        grid.stopEditing();
                        editor_value_ComboBox.setDisabled(false);
                    }

                });

            } //end if
        };
        /*get all languages from database to local*/
        /*invoke another function loadList*/
        var loadLanguageList = function () {
            loadList(data_editor_value_Language, 'GET_language', 'Compiling list values...');
        };




        /*get all T_Type from database to local*/
        /*invoke another function loadList*/
        var loadTestType = function () {
            loadList(data_editor_value_TestType, 'GET_T_Type', 'Compiling list values...');
        };


        /*get all TestFeatureID from database to local*/
        /*invoke another function loadList*/
        var loadTestFeatureID = function () {
            loadList(data_editor_value_FeatureID, 'GET_T_Feature_ID', 'Compiling list values...');
        };


        /*get all IDEAVersion from database to local*/
        /*invoke another function loadList*/
        var loadEnv_IDEA_Encoding = function () {
            loadList(data_editor_value_IDEAVersion, 'GET_env_IDEA_Encoding', 'Compiling list values...');
        };

        /*get all OS from database to local*/
        /*invoke another function loadList*/
        var loadEnv_OS = function () {
            loadList(data_editor_value_OS, 'GET_env_OS', 'Compiling list values...');
        };

        /*get all User_Type from database to local*/
        /*invoke another function loadList*/
        var loadEnv_User_Type = function () {
            loadList(data_editor_value_UserType, 'GET_env_User_Type', 'Compiling list values...');
        };
        /*get all T_Status from database to local*/
        /*invoke another function loadList*/
        var loadT_Status = function () {
            loadList(data_editor_value_Status, 'GET_T_Status', 'Compiling list values...');
        };


        /*get all CreatedBy from database to local*/
        /*invoke another function loadList*/
        var loadCreatedBy = function () {
            loadList(data_editor_value_RunCreater, 'GET_TR_Created_By', 'Compiling list values...');
        };


        /*get all Last_Mod_By from database to local*/
        /*invoke another function loadList*/
        var loadLast_Mod_By = function () {
            loadList(data_editor_value_LastModifiedBy, 'GET_TR_Last_Mod_By', 'Compiling list values...');
        };


        /*get all Main_Component from database to local*/
        /*invoke another function loadList*/
        var loadMain_Component = function () {
            loadList(data_editor_value_MainComponent, 'GET_T_Main_Component', 'Compiling list values...');
        };


        /*get all Task from database to local*/
        /*invoke another function loadList*/
        var loadTask = function () {
            loadList(data_editor_value_Task, 'GET_Task', 'Compiling list values...');
        };
        /*get all Flavour from database to local*/
        /*invoke another function loadList*/
        var loadFlavour = function () {
            loadList(data_editor_value_Flavour, 'GET_Flavour', 'Compiling list values...');
        };
        //#endregion
        //#region Run button
        /*handler for clicking "Run Query"button*/
        /*invoke function GoToPage to load first page on View Results panel*/
        var handler_click_btn_excuteQuery = function () {

            GoToPage(1);
            //btn_exportAllButton.setDisabled(true);

        };

        /*"Run Query"button*/
        var btn_excuteQuery = new Ext.Button
        ({
            text: 'Run',
            tooltip: 'Run Query',
            disabled: true,
            //            iconCls: 'icon-add',
            listeners:
            {
                click: handler_click_btn_excuteQuery
            }
        });
        //#endregion
        //#region Append button
        /*  handler for clicking 'Append Clause' button      */
        /*  used to append a empty record at end of 'Query Editor'      */
        var handler_click_btn_appendClause = function () {
            var thegrid = Ext.getCmp('queryGrid');

            var record = thegrid.getSelectionModel().getSelected(); //get selected row

            // get selected row index to tell where we need to put in
            var rowIndex = thegrid.store.indexOf(record);

            thegrid.stopEditing();


            thegrid.store.add
                        (
                            new Clause({ Operand: 'AND', Index: thegrid.store.data.length })//, fieldName: 'aaa', operator: '>', value: '10.00' })
                        );
            thegrid.startEditing(thegrid.store.data.length - 1, 0);


            //'Operand' on first row should be empty
            var firstRow = queryGrid.getStore().getAt(0);

            // set the value (shows dirty flag):
            firstRow.set('Operand', null);
            // commit the change (removes dirty flag):
            firstRow.commit();
        };



        /* 'Append Clause' button      */
        var btn_appendClause = new Ext.Button
        ({
            text: 'Append',
            tooltip: 'Append Clause',
            disabled: true,
            //            iconCls: 'icon-add',
            listeners:
            {
                click: handler_click_btn_appendClause
            }
        });
        //#endregion
        //#region Delete button


        /* 'Delete Clause' button      */
        var btn_deleteClause = new Ext.Button
        ({
            text: 'Delete',
            tooltip: 'Delete Clause',
            disabled: true,
            //            iconCls: 'icon-delete',
            listeners:
            {
                click: function () {
                    var thegrid = Ext.getCmp('queryGrid');
                    var record = thegrid.getSelectionModel().getSelected(); //get selected row
                    deleteClause(thegrid, record);
                    btn_saveQuery.setDisabled(false);
                    btn_cancelChangeQuery.setDisabled(false);
                    btn_deleteClause.setDisabled(true);
                    button_MoveDownClause.setDisabled(true);
                    button_MoveUpClause.setDisabled(true);

                }
            }
        });
        //#endregion
        //#region Up button
        /* the handler of clicking "Move Up"button*/
        /*to move record,update record index and operand value*/
        /*control button's usebility*/
        var btn_MoveUpClause_click = function () {
            //do something ...

            var thegrid = Ext.getCmp('queryGrid');

            //            var record = thegrid.getSelectionModel().getSelected(); //get selected row

            //            // get selected row index to tell where we need to put in
            //            var rowIndex = thegrid.store.indexOf(record);

            //            thegrid.move(rowIndex, rowIndex - 1);
            moveSelectedRow(thegrid, -1);
            updateGridRecordIndex(thegrid);
            updateGridRecordOperand(thegrid);
            btn_saveQuery.setDisabled(false);
            btn_cancelChangeQuery.setDisabled(false);
            btn_saveAsQuery.setDisabled(false);

            if (thegrid.getSelectionModel().hasNext()) {
                button_MoveDownClause.setDisabled(false);
            }
            else {
                button_MoveDownClause.setDisabled(true);
            }

            if (thegrid.getSelectionModel().hasPrevious()) {
                button_MoveUpClause.setDisabled(false);
            }
            else {
                button_MoveUpClause.setDisabled(true);
            }
        };
        /* "Move Up"button*/
        var button_MoveUpClause = new Ext.Button
        ({
            text: 'Up',
            tooltip: 'Move up Clause',
            disabled: true,
            //            iconCls: 'icon-add',
            listeners:
            {
                click: btn_MoveUpClause_click
            }
        });
        //#endregion
        //#region Down button
        /* the handler of clicking  "Move down"button*/
        /*to move record,update record index and operand value*/
        /*control button's usebility*/
        var btn_MoveDownClause_click = function () {
            //do something ...
            var thegrid = Ext.getCmp('queryGrid');

            //            var record = thegrid.getSelectionModel().getSelected(); //get selected row

            //            // get selected row index to tell where we need to put in
            //            var rowIndex = thegrid.store.indexOf(record);

            //            thegrid.move(rowIndex, rowIndex - 1);
            moveSelectedRow(thegrid, 1);
            updateGridRecordIndex(thegrid);
            updateGridRecordOperand(thegrid);
            btn_saveQuery.setDisabled(false);
            btn_cancelChangeQuery.setDisabled(false);
            btn_saveAsQuery.setDisabled(false);

            if (thegrid.getSelectionModel().hasNext()) {
                button_MoveDownClause.setDisabled(false);
            }
            else {
                button_MoveDownClause.setDisabled(true);
            }

            if (thegrid.getSelectionModel().hasPrevious()) {
                button_MoveUpClause.setDisabled(false);
            }
            else {
                button_MoveUpClause.setDisabled(true);
            }
        };
        /* "Move down"button*/
        var button_MoveDownClause = new Ext.Button
        ({
            text: 'Down',
            tooltip: 'Move down Clause',
            disabled: true,
            //            iconCls: 'icon-add',
            listeners:
            {
                click: btn_MoveDownClause_click
            }
        });
        //#endregion
        //#region Group Clause
        function arraysEqual(a, b) {
            var a_sort = a.sort();
            var b_sort = b.sort();
            if (a_sort === b_sort) return true;
            if (a == null || b == null) return false;
            if (a.length != b.length) return false;

            // If you don't care about the order of the elements inside
            // the array, you should sort both arrays here.

            for (var i = 0; i < a.length; ++i) {
                if (a_sort[i] !== b_sort[i]) return false;
            }
            return true;
        }
        function getMatch(a, b) {
            var matches = [];

            for (var i = 0; i < a.length; i++) {
                for (var e = 0; e < b.length; e++) {
                    if (a[i] === b[e])
                        matches.push(a[i]);
                }
            }
            return matches;
        };


        function compare_twoarrays(array1, array2) {

            if (!arraysEqual(array1, array2)) {
                var elements_match = getMatch(array1, array2);
                if (elements_match.length != 0) {
                    if (arraysEqual(elements_match, array2)) return 'isNesting';
                    else if (arraysEqual(elements_match, array1)) return 'isNested';
                    else return 'isPartiallyOverlap';
                }
                else return 'isSibling';
            }
            else return 'equal';
        };
        Array.prototype.insert = function (index, item) {
            this.splice(index, 0, item);
        };


        function renderName(value, metaData, record, rowIndex, colIndex, store) {

            var returnString = "<strong>";

            if (record.get("level1") == "male") {

                metaData.attr = 'style="color: blue;"';

                returnString += "Mr.";

            }

            if (record.get("sex") == "female") {

                metaData.attr = 'style="color: red;"';

                returnString += "Mrs.";

            }

            returnString += "</strong> " + value;

            return returnString;

        }


        /*handler of clicking group clause button row*/
        /*to make selected row continous*/
        //        var Index_groups = new Array();
        //        var Index_group = new Array(); 

        //        var Index_group2 = new Array();
        //        Index_group1.push([1, 2, 3, 4]);


        var level = 0; //how many level group in the query
        var index_groups_levels = new Array();
        var List_GAmount = new Array(); //array to store the list of the groups amount in all levels-List_GAmount[0] for level 1


        var button_GroupClauses_click = function () {
            var thegrid = Ext.getCmp('queryGrid');
            ////            thegrid.addColumn('Group', 'Group', 10);
            var Index_newgroup = new Array();
            //            //            thegrid.addColumn('Group', 'Group', 5);
            var selections = thegrid.getSelectionModel().selections;
            //            //            thegrid.getSelectionModel()
            for (var i = 0; i < selections.length; i++) {
                //                                selections.items[i].set('Group2', 1);
                Index_newgroup.push(selections.items[i].data.Index);
            }

            if (level == 0) {
                level = 1;
                var index_groups = new Array();
                index_groups.push(Index_newgroup);
                index_groups_levels.push(index_groups);
                List_GAmount.push(1);

                thegrid.addColumn('Level1', 'Level1', 0);
                for (var i = 0; i < selections.length; i++) {
                    selections.items[i].set('Level1', List_GAmount[0]);
                }
            }
            else {
                var IsNesting = false;
                var newLevel = -1;
                for (var j = level; j > 0; j--) //foreach groups_level in groups_levels, starting with top level
                {
                    for (var k = 0; k < List_GAmount[j - 1]; k++)//foreach index_group in  index_groups for level j
                    {

                        switch (compare_twoarrays(Index_newgroup, index_groups_levels[j - 1][k])) {
                            case 'equal':

                            case 'isPartiallyOverlap':
                                IsNesting = false;
                                newLevel = -1;
                                k = List_GAmount[j - 1];
                                j = 0;
                                break;
                            case 'isSibling':
                                if (k == List_GAmount[j - 1] - 1) {
                                    List_GAmount[j - 1]++;
                                    index_groups_levels[j - 1].push(Index_newgroup);
                                    for (var i = 0; i < selections.length; i++) {
                                        selections.items[i].set('Level' + j, List_GAmount[j - 1]);
                                    }
                                    j = 0;
                                }
                                break;
                            case 'isNesting':

                                IsNesting = true;
                                newLevel = j;


                                //                                k = List_GAmount[j - 1];
                                //                                j = 0;
                                break;
                            case 'isNested':
                                //                                if (j == 1) {
                                //                                    for (var m = 1; m < level + 1; m++) {
                                //                                        thegrid.removeColumn('Level' + m, 0);
                                //                                    }

                                //                                    level++;

                                //                                    List_GAmount.unshift(1);

                                //                                    var index_groups = new Array();
                                //                                    index_groups.push(Index_newgroup);
                                //                                    index_groups_levels.unshift(index_groups);

                                //                                    for (var i = 1; i < level + 1; i++) {
                                //                                        thegrid.addColumn('Level' + i, 'Level' + i, 0);
                                //                                        for (var n = 0; n < List_GAmount[i - 1]; n++) {
                                //                                            for (var h = 0; h < index_groups_levels[i - 1][n].length; h++) {
                                //                                                thegrid.getStore().getAt(index_groups_levels[i - 1][n][h]).set('Level' + i, n + 1);

                                //                                            }
                                //                                        }


                                //                                    }


                                //                                }
                                //                                j++;

                                break;
                        } //end switch

                    }
                }
                if (IsNesting) {
                    for (var m = 1; m < level + 1; m++) {
                        thegrid.removeColumn('Level' + m, 0);
                    }

                    level++;

                    List_GAmount.insert(newLevel, 1);

                    var index_groups = new Array();
                    index_groups.push(Index_newgroup);
                    index_groups_levels.insert(newLevel, index_groups);

                    for (var i = 1; i < level + 1; i++) {
                        thegrid.addColumn('Level' + i, 'Level' + i, 0);
                        for (var n = 0; n < List_GAmount[i - 1]; n++) {
                            for (var h = 0; h < index_groups_levels[i - 1][n].length; h++) {
                                thegrid.getStore().getAt(index_groups_levels[i - 1][n][h]).set('Level' + i, n + 1);

                            }
                        }


                    }
                    IsNesting = false;
                    newLevel = -1;

                }

            }

            //            thegrid.getView().getCell(2, 2).style = "background-image:none;background-color:#00cc99;";
            //                    for(var i=0;i<10;i++)
            //                    {
            ////                        var level = record.get('level1');
            ////                        if (group < 0) {
            ////                            return 'price-fall';
            ////                        } else if (group > 0) {
            ////                            return 'price-rise';
            ////                                                }
            //                        switch (group)
            //                        {
            //                            case 1:
            //                                thegrid.getView().getCell(curr_row_idx[i], curr_cell_idx[i]).style.setAttribute('background', 'yellow');
            //                                break;
            //                            case 2:
            ////                                return 'group2';
            //                                break;
            //                            case 3:
            ////                                return 'group3';
            //                                break;
            //                            case 4:
            ////                                return 'group4';
            //                                break;
            //                            case 5:
            ////                                return 'group5';
            //                                break;
            //                            case 6:
            ////                                return 'group6';
            //                                break;
            //                            case 7:
            //                            
            //                                break;
            //                        }
            //                    }


            //                }
            //            },


            thegrid.getStore().commitChanges();

        };

        /* group clause button row*/
        var button_GroupClauses = new Ext.Button
        ({
            text: 'Group',
            tooltip: 'Group Clauses',
            disabled: false,
            //            iconCls: 'icon-add',
            listeners:
            {
                click: button_GroupClauses_click
            }
        });
        //#endregion
        //#region Ungroup Clause
        /*handler of clicking group clause button row*/
        /*to make selected row continous*/
        var button_UngroupClauses_click = function () {
            var thegrid = Ext.getCmp('queryGrid');
            //            thegrid.addColumn('Group', 'Group', 5);
            //            var selections = thegrid.getSelectionModel().selections;
            //            //            thegrid.getSelectionModel()
            //            for (var i = 0; i < selections.length; i++) {
            //                selections.items[i].set('Group', 1);
            //            }
            //            thegrid.store.clearGrouping();


        };

        /* group clause button row*/
        var button_UngroupClauses = new Ext.Button
        ({
            text: 'Ungroup',
            tooltip: 'Ungroup Clauses',
            disabled: false,
            //            iconCls: 'icon-add',
            listeners:
            {
                click: button_UngroupClauses_click
            }
        });
        //#endregion
        //#region Save As button
        /*handler for clicking"Save As New Query"button*/
        /*Open new query window with name "copy" plus the selected query name*/
        var handler_click_btn_saveAsQuery = function () {
            var thetree = Ext.getCmp('queryTree');
            var Win = Ext.getCmp('Win_newquery');
            var txtf_newQueryName = Ext.getCmp('txtf_newQueryName');
            Win.show();
            txtf_newQueryName.setValue("copy " + thetree.getNodeById(currentQuery.id).text);
            //        txtf_newQueryName.selectText(); 

            txtf_newQueryName.focus();

        };


        /*"Save As New Query"button*/
        var btn_saveAsQuery = new Ext.Button
        ({
            text: 'Save As',
            tooltip: 'Save As New Query',
            disabled: true,
            listeners:
            {
                click: handler_click_btn_saveAsQuery

            }
        });
        //#endregion
        //#region Save button
        /*handler for clicking on 'Save Query'button*/
        /*if the Save for update existing query, confirmation is provided*/
        /*if the Save for no existing query, new query window will be displayed, so use can name new query*/
        var handler_click_btn_saveQuery = function () {
            var Win = Ext.getCmp('Win_newquery');
            var txtf_newQueryName = Ext.getCmp('txtf_newQueryName');
            if (currentQuery != undefined) {
                Ext.MessageBox.confirm(
                'Confirm Box',
                ' Are you sure you want to save changes to  "' + currentQuery.text + ' "?',
                function (buttonText) {
                    if (buttonText == "no") {

                    }
                    if (buttonText == "yes") {


                        Ext.Ajax.request
                            ({
                                url: 'Clear_Query',
                                params:
                                    {
                                        "QueryID": currentQuery.id

                                    },
                                method: 'POST',
                                success: function (result, request) {
                                    cleanQueryEditor();
                                    for (var i = 0; i < queryStore.data.items.length; i++) {

                                        updatequery(queryStore.data.items[i]);

                                    }

                                    isUnsavedQuery = false;
                                    btn_saveQuery.setDisabled(true);
                                    btn_cancelChangeQuery.setDisabled(true);
                                    btn_saveAsQuery.setDisabled(false);

                                },
                                failure: function (result, request) {
                                    Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                                }
                            });

                    } //if (buttonText == "yes") end
                }); //function(buttonText)  end
            } //if(currentQuery!=undefined) end
            else// currentQuery==undefined
            {

                Win.show();
                txtf_newQueryName.reset();
                //        txtf_newQueryName.selectText(); 

                txtf_newQueryName.focus();

            } //else end
        };

        /*'Save Query'button*/
        var btn_saveQuery = new Ext.Button
        ({
            text: 'Save',
            tooltip: 'Save Query',
            disabled: true,
            //            iconCls: 'icon-add',
            listeners:
            {
                click: handler_click_btn_saveQuery

            }
        });
        //#endregion
        //#region Cancel button
        var btn_cancelChangeQuery = new Ext.Button
        ({
            text: 'Cancel',
            tooltip: 'Cancel Change Query',
            disabled: true,
            //            iconCls: 'icon-add',
            listeners:
            {
                click: function () {
                    //do something ...

                    loadQuery(currentQuery);
                    btn_appendClause.setDisabled(false);
                    btn_excuteQuery.setDisabled(false);
                    btn_saveQuery.setDisabled(true);
                    btn_saveAsQuery.setDisabled(false);
                    btn_cancelChangeQuery.setDisabled(true);
                    button_MoveDownClause.setDisabled(true);
                    button_MoveUpClause.setDisabled(true);
                    btn_deleteClause.setDisabled(true);

                }
            }
        });
        //#endregion
        //#region Context Menu
        /*  Function to insert a new clause above the selected row     */
        /*  used by 'Inset' item of context menu      */
        var InsertClause = function () {

            //do something ...

            var thegrid = Ext.getCmp('queryGrid');

            var record = thegrid.getSelectionModel().getSelected(); //get selected row

            // get selected row index to tell where we need to put in
            var rowIndex = thegrid.store.indexOf(record);



            // Now add a new row!

            thegrid.store.insert(rowIndex, new Clause({ Operand: 'AND', Index: rowIndex }));
            for (var i = rowIndex + 1; i < thegrid.store.data.length; i++) {
                queryGrid.getStore().getAt(i).set('Index', i);
                queryGrid.getStore().getAt(i).commit();
            }
            thegrid.startEditing(rowIndex, 0);
            //            }

            var firstRow = queryGrid.getStore().getAt(0);

            // set the value (shows dirty flag):
            firstRow.set('Operand', null);
            // commit the change (removes dirty flag):
            firstRow.commit();
        };

        /*action on context menu to insert new clause in front of the seleted item*/
        var Action_InsertClause = new Ext.Action({
            text: 'Insert Clause',
            disabled: true,
            handler: function () {
                InsertClause();
            },
            itemId: 'Action_InsertClause'
        });

        /*action on context menu to delete the seleted item*/
        var Action_DeleteClause = new Ext.Action({
            text: 'Delete Clause',
            disabled: true,
            handler: function () {
                var thegrid = Ext.getCmp('queryGrid');
                var record = thegrid.getSelectionModel().getSelected(); //get selected row
                deleteClause(thegrid, record);
                btn_saveQuery.setDisabled(false);
                btn_cancelChangeQuery.setDisabled(false);

            },
            itemId: 'Action_DeleteClause'
        });
        /*context menu*/
        var RowContextMenu = new Ext.menu.Menu({
            id: 'RowContextMenu',
            items:
            [
                Action_InsertClause,
                Action_DeleteClause
            ]
        });

        /*function to control context menu*/
        var onContextMenu = function (grid, rowIndex, e) {
            try {
                var thetree = Ext.getCmp('queryTree');
                var selectnode = thetree.getSelectionModel().getSelectedNode();

                grid.getSelectionModel().selectRow(rowIndex);

                if ((IsTeamQuery(selectnode) && !IsManager && !IsAdmin)) {
                    RowContextMenu.items.each(
                    function (item) {
                        item.disable();
                    });
                }
                else {

                    RowContextMenu.items.each(
                    function (item) {
                        item.enable();
                    });
                }




                e.preventDefault();
                RowContextMenu.showAt(e.getXY());
            }
            catch (ex) {
                alert(ex.message);
            }
        };

        //#endregion
        //#region Column model
        /*  Index column      */
        /*  It is hidden      */
        /*  It is used for recording the row position when loading query's clauses  */
        /*  It is used as an element of column model      */
        var Column_Index = new Ext.grid.Column({

            id: 'Index',
            header: 'Index',
            dataIndex: 'Index',
            width: 120,
            hidden: true

        });

        /*  Group column      */
        /*  It is hidden      */
        /*  It is used for recording the grouping information when loading query's clauses  */
        /*  It is used as an element of column model      */
        var Column_Group1 = new Ext.grid.Column({

            id: 'Group',
            header: 'Group1',
            dataIndex: 'Group1',
            width: 120
            //            hidden: true

        });
        var Column_Group2 = new Ext.grid.Column({

            id: 'Group',
            header: 'Group2',
            dataIndex: 'Group2',
            width: 120
            //            hidden: true

        });
        var Column_Group3 = new Ext.grid.Column({

            id: 'Group',
            header: 'Group3',
            dataIndex: 'Group3',
            width: 120
            //            hidden: true

        });
        var Column_Group4 = new Ext.grid.Column({

            id: 'Group',
            header: 'Group4',
            dataIndex: 'Group4',
            width: 120
            //            hidden: true

        });

        /*  Operand column      */
        /*  It is visable for user      */
        /*  allow user to select the value  */
        /*  It is used as an element of column model      */
        var Column_Operand = new Ext.grid.Column({

            id: 'Operand',
            header: 'AND/OR',
            dataIndex: 'Operand',
            width: 120,
            menuDisabled: true,
            sortable: false
            //                editor: new Ext.form.TextField({ allowBlank: false })
            //                editor: this.idCombo()
            //            editor: editor_ListCombofield_Operand// specify reference to combo instance


        });



        /*  fieldName column      */
        /*  It is visable for user      */
        /*  allow user to select the value  */
        /*  It is used as an element of column model      */
        var Column_fieldName = new Ext.grid.Column({

            id: 'fieldName',
            header: 'FIELD',
            dataIndex: 'FieldName',
            width: 120,
            menuDisabled: true,
            sortable: false,
            //            editor: editor_ListCombo_field, //editor_ListCombo_field//editor_ListCombofield_fieldName
            renderer: Ext.util.Format.comboRenderer(editor_ListCombo_field) // pass combo instance to reusable renderer     
        });

        /*  operator column      */
        /*  It is visable for user      */
        /*  allow user to select the value  */
        /*  It is used as an element of column model      */
        var Column_operator = new Ext.grid.Column({

            id: 'operator',
            header: 'OPERATOR',
            dataIndex: 'Operator',
            width: 120,
            menuDisabled: true,
            sortable: false



        });
        /*  value column      */
        /*  It is visable for user      */
        /*  allow user to enter the value  */
        /*  It is used as an element of column model      */
        var Column_value = new Ext.grid.Column({

            id: 'value',
            header: 'VALUE',
            dataIndex: 'Value',
            //            minWidth: 120,
            width: 120,
            menuDisabled: true,
            sortable: false
        });


        /*  column model      */
        /*  It is used as an element of 'Query Editor'      */
        var queryColumnModel = new Ext.grid.ColumnModel({
            id: 'queryColumnModel',
            columns:
            [

                Column_Operand,
                Column_fieldName,
                Column_operator,
                Column_value,
                Column_Index

            ////////////////////////////Grouping
            // Column_Group
            ],
            isCellEditable: function (col, row) {

                if (col == 0 && row == 0) { // replace with your condition
                    return false;
                }
                return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, col, row);
            }
        });



        //#endregion
        //#region Store
        /*Clause model used by the store of Query Editor*/
        /*it is also used to instantiate a new recordin query editor*/
        var Clause = Ext.data.Record.create
        ([
                { name: 'ClauseID', type: 'int' }, //The unique identifier for the clause.
                {name: 'Index', type: 'int' }, //The unique identifier for the clause.
                {name: 'FieldName', type: 'string' },
                { name: 'FieldType', type: 'string' },
                { name: 'Operand', type: 'string' }, //The operand of the clause.
                {name: 'Operator', type: 'string' },
                { name: 'Value', type: 'string' }
        //////////////////
        //                {name: 'Group1', type: 'int' },
        //                { name: 'Group2', type: 'int' },
        //                { name: 'Group3', type: 'int' },
        //                { name: 'Group4', type: 'int' }
        ]);



        /*JsonReader used by the store of Query Editor*/
        var reader_queryGrid = new Ext.data.JsonReader({
            type: 'json',
            totalProperty: 'total',
            successProperty: 'success',
            root: 'data'
        }, Clause);


        /*handler of removing a record from the store of  Query Editor*/
        var handler_remove_queryStore = function (store, record, index) {

            if (index == 0) {
                btn_deleteClause.setDisabled(true);
            }
        };

        /*the store of  Query Editor*/
        var queryStore = new Ext.data.Store
        ({
            recordType: Clause,
            reader: reader_queryGrid,

            listeners:
            {
                remove: handler_remove_queryStore
            }
        });
        /*set the default sort of the store on  Query Editor*/
        queryStore.setDefaultSort('Index', 'ASC');




        /////////////////////////////////
        //#endregion
        //#region handlers of Query Editor 
        /*handler for afterediting of "Query Editor"*/
        /*control button usable*/
        /*control button usable*/
        /*remove the operand from the 1st record in the store*/
        /*set default value for "OPERATOR" column and "VALUE" column base on new value on'FIELD'*/
        /*set the date format of value for "VALUE" column*/
        var handler_Grid_afteredit = function (e) {

            btn_saveQuery.setDisabled(false);
            btn_cancelChangeQuery.setDisabled(false);
            btn_saveAsQuery.setDisabled(false);

            if (e.grid.getSelectionModel().hasNext()) {
                button_MoveDownClause.setDisabled(false);
            }
            else {
                button_MoveDownClause.setDisabled(true);
            }

            if (e.grid.getSelectionModel().hasPrevious()) {
                button_MoveUpClause.setDisabled(false);
            }
            else {
                button_MoveUpClause.setDisabled(true);
            }

            isUnsavedQuery = true;

            if (e.field == "FieldName") {

                switch (e.record.data.FieldName) {
                    case 'TR_Date_Created':
                    case 'TR_Date_Last_Mod':
                    case 'Estimated_Time':
                    case 'TR_Num':
                    case 'TC_Num':
                        e.record.set('Operator', "="); break; //
                    case 'TR_Created_By':
                    case 'TR_Last_Mod_By':
                    case 'env_IDEA_Encoding':
                    case 'env_OS':
                    case 'env_User_Type':
                    case 'T_Main_Component':
                    case 'T_Feature_ID':
                    case 'T_Type':
                    case 'product':
                    case 'T_Status':
                    case 'Flavour':
                    case 'Task':
                    case 'isAutomated':
                    case 'Language':
                        e.record.set('Operator', "Equal to"); break; //for drop down field
                    case 'T_Summary':
                    case 'Build':
                    case 'Folders':
                    case 'PartialFailNotes':
                    case 'ProblemStatement':
                    case 'T_Variants':
                        e.record.set('Operator', "Contains"); break; //for text field
                    default:
                        e.grid.store.remove(e.record); break;

                }

                e.record.set('Value', null);
            }
            else if (e.field == "Operator") {
                if (e.record.data.Operator == "") {

                    switch (e.record.data.FieldName) {
                        case 'TR_Date_Created':
                        case 'TR_Date_Last_Mod':
                        case 'Estimated_Time':
                        case 'TR_Num':
                        case 'TC_Num':
                            e.record.set('Operator', "="); break; //
                        case 'TR_Created_By':
                        case 'TR_Last_Mod_By':
                        case 'env_IDEA_Encoding':
                        case 'env_OS':
                        case 'env_User_Type':
                        case 'T_Main_Component':
                        case 'T_Feature_ID':
                        case 'T_Type':
                        case 'product':
                        case 'T_Status':
                        case 'Flavour':
                        case 'Task':
                        case 'isAutomated':
                        case 'Language':
                            e.record.set('Operator', "Equal to"); break; //for drop down field
                        case 'T_Summary':
                        case 'Build':
                        case 'Folders':
                        case 'PartialFailNotes':
                        case 'ProblemStatement':
                        case 'T_Variants':
                            e.record.set('Operator', "Contains"); break; //for text field
                        default:
                            e.grid.store.remove(e.record); break;
                    }
                }

            }
            else if (e.field == "Operand") {
                if (e.record.data.Operand == "") {

                    e.record.set('Operand', "AND");

                }

            }
            else if (e.field == "Value") {
                if (e.grid.getColumnModel().getColumnAt(3).getEditor().getXType() == 'datefield') {

                    e.record.set('Value', editor_valueDateField.value);

                }

            }

            //Get the Record at the index 0
            var firstrecord = e.grid.getStore().getAt(0);

            // set the value (shows dirty flag):
            firstrecord.set('Operand', null);

            // commit the change (removes dirty flag):
            e.record.commit();

        };
        /*handler of clicking row  on Query Editor*/
        /*to control buttons usable*/
        var handler_Grid_rowclick = function (grid, rowIndex, e) {

            var allowEdit = false;


            allowEdit = (currentQuery != undefined) ?
                        ((IsAuthenticated && !IsTeamQuery(currentQuery)) || IsManager || IsAdmin) :
                        ((IsAuthenticated) || IsManager || IsAdmin);

            if (allowEdit) {
                btn_deleteClause.setDisabled(false);
                btn_appendClause.setDisabled(false);
                if (grid.getSelectionModel().hasNext()) {
                    button_MoveDownClause.setDisabled(false);
                }
                else {
                    button_MoveDownClause.setDisabled(true);
                }

                if (grid.getSelectionModel().hasPrevious()) {
                    button_MoveUpClause.setDisabled(false);
                }
                else {
                    button_MoveUpClause.setDisabled(true);
                }
            }
            else {
                btn_deleteClause.setDisabled(true);
                btn_appendClause.setDisabled(true);
                button_MoveUpClause.setDisabled(true);
                button_MoveDownClause.setDisabled(true);
            }
        };

        Column_Operand.setEditor(editor_ListCombofield_Operand);
        Column_fieldName.setEditor(editor_ListCombo_field);
        /*handler of clicking on a cell  on Query Editor*/
        /*set editor on "OPERATOR"column*/
        /*set editor on "VALUE"column*/
        var handler_Grid_cellclick = function (grid, rowIndex, columnIndex, e) {
            var record = grid.getStore().getAt(rowIndex);
            var fieldName = grid.getColumnModel().getDataIndex(columnIndex); // Get field name

            var allowEdit = false;


            allowEdit = (currentQuery != undefined) ?
                        ((IsAuthenticated && !IsTeamQuery(currentQuery)) || IsManager || IsAdmin) :
                        ((IsAuthenticated) || IsManager || IsAdmin);

            if (allowEdit) {
                grid.getColumnModel().setEditable(0, true);
                grid.getColumnModel().setEditable(1, true);
                if (columnIndex == 2) {
                    if (record.get('FieldName') == undefined) {

                        grid.getColumnModel().setEditable(2, false);

                    }
                    else {
                        //operator control

                        var fieldName = record.get('FieldName').replace(/^[ ]+|[ ]+$/g, '');

                        switch (fieldName) {
                            case 'TR_Date_Created':
                            case 'TR_Date_Last_Mod':
                            case 'Estimated_Time':
                            case 'TR_Num':
                            case 'TC_Num':
                                editor_operator_ComboBox.store.loadData(data_editor_operator_date); break; //
                            //                        case 'Build':                                                                                                                                                                                                                                                                                                                                                                 
                            case 'TR_Created_By':
                            case 'TR_Last_Mod_By':
                            case 'env_IDEA_Encoding':
                            case 'env_OS':
                            case 'env_User_Type':
                            case 'T_Main_Component':
                            case 'T_Feature_ID':
                            case 'T_Type':
                            case 'product':
                            case 'T_Status':
                            case 'Flavour':
                            case 'isAutomated':
                            case 'Language':
                                editor_operator_ComboBox.store.loadData(data_editor_operator_dropdown); break; //for drop down field
                            default:
                                editor_operator_ComboBox.store.loadData(data_editor_operator_text); break; //for text field
                        }
                        if (grid.getColumnModel().isCellEditable(2, rowIndex) == false) {
                            grid.getColumnModel().setEditable(2, true);
                        }

                        if (grid.getColumnModel().getCellEditor(2, rowIndex) == null) {

                            grid.getColumnModel().setEditor(2, editor_operator_ComboBox);

                        }

                    }

                }
                ///////////////////////////////////////////////value field control////////////////////////////////////////////////////////
                if (columnIndex == 3) {
                    if (record.get('FieldName') == undefined) {

                        grid.getColumnModel().setEditable(3, false);

                    }
                    else {


                        if (grid.getColumnModel().isCellEditable(3, rowIndex) == false) {
                            grid.getColumnModel().setEditable(3, true);
                        }




                        var fieldName = record.get('FieldName').replace(/^[ ]+|[ ]+$/g, '');

                        switch (fieldName) {

                            /////////for text field-number only
                            case 'Estimated_Time':

                            case 'TR_Num':

                            case 'TC_Num':
                                {

                                    if (grid.getColumnModel().getCellEditor(3, rowIndex) != null) {

                                        if (grid.getColumnModel().getColumnAt(3).getEditor().getXType() != 'numberfield') {
                                            grid.getColumnModel().setEditor(3, new Ext.form.NumberField({ id: "valueNumberField" }));

                                        }
                                    }
                                    else {
                                        grid.getColumnModel().setEditor(3, new Ext.form.NumberField({ id: "valueNumberField" }));

                                    }
                                    break;
                                }



                                /////////for drop down field/////////////////////
                                //                        case 'Build':
                            case 'TR_Created_By':
                            case 'TR_Last_Mod_By':
                            case 'env_IDEA_Encoding':
                            case 'env_OS':
                            case 'env_User_Type':
                            case 'T_Main_Component':
                            case 'T_Feature_ID':
                            case 'T_Type':
                            case 'product':
                            case 'T_Status':
                            case 'Flavour':
                            case 'Task':
                            case 'isAutomated':
                            case 'Language':
                                {


                                    if (grid.getColumnModel().getCellEditor(3, rowIndex) != null) {

                                        if (grid.getColumnModel().getColumnAt(3).getEditor().getXType() != 'combo') {
                                            grid.getColumnModel().setEditor(3, editor_value_ComboBox);
                                        }
                                    }
                                    else {

                                        grid.getColumnModel().setEditor(3, editor_value_ComboBox);
                                    }

                                    break;
                                }

                                /////////for date field/////////////////////        
                            case 'TR_Date_Created':
                            case 'TR_Date_Last_Mod':
                                {


                                    if (grid.getColumnModel().getCellEditor(3, rowIndex) != null) {
                                        //                            alert(grid.getColumnModel().getColumnAt(3).getEditor().getXType());
                                        if (grid.getColumnModel().getColumnAt(3).getEditor().getXType() != 'datefield') {
                                            grid.getColumnModel().setEditor(3, editor_valueDateField);
                                        }
                                    }
                                    else {
                                        grid.getColumnModel().setEditor(3, editor_valueDateField);
                                    }
                                    break;
                                }
                            default:
                                {

                                    if (grid.getColumnModel().getCellEditor(3, rowIndex) != null) {
                                        if (grid.getColumnModel().getColumnAt(3).getEditor().getXType() != 'textfield') {
                                            grid.getColumnModel().setEditor(3, new Ext.form.TextField({ id: "textfield" }));

                                        }
                                    }
                                    else {
                                        grid.getColumnModel().setEditor(3, new Ext.form.TextField({ id: "textfield" }));
                                    }
                                    break;
                                }

                        }
                        //fix up for losing editor_value_ComboBox.store when replace  editor from editor_value_ComboBox to other type
                        if (editor_value_ComboBox.store == null) {
                            editor_value_ComboBox = new Ext.form.ComboBox
                            ({
                                id: 'editor_value_ComboBox',
                                mode: 'local',
                                valueField: 'value',
                                displayField: 'value',
                                store: 'store_value',
                                triggerAction: 'all',
                                listeners:
                                {
                                    select: fieldSelected
                                }
                            });
                        }



                        switch (fieldName) {


                            /////////for drop down field

                            case 'TR_Created_By':
                                loadCreatedBy();
                                editor_value_ComboBox.store.loadData(data_editor_value_RunCreater);
                                break; //for RunCreater
                            case 'TR_Last_Mod_By':
                                loadLast_Mod_By();
                                editor_value_ComboBox.store.loadData(data_editor_value_LastModifiedBy);
                                break; //for LastModifiedBy
                            case 'env_IDEA_Encoding':
                                //                            loadEnv_IDEA_Encoding();
                                editor_value_ComboBox.store.loadData(data_editor_value_IDEAVersion);
                                break; //for IDEAVersion
                            case 'env_OS':
                                loadEnv_OS();
                                editor_value_ComboBox.store.loadData(data_editor_value_OS);
                                break; //for OS
                            case 'env_User_Type':
                                //                            loadEnv_User_Type();
                                editor_value_ComboBox.store.loadData(data_editor_value_UserType);
                                break; //for UserType
                            case 'T_Main_Component':
                                loadMain_Component();
                                editor_value_ComboBox.store.loadData(data_editor_value_MainComponent);
                                break; //for MainComponent
                            case 'T_Feature_ID':
                                loadTestFeatureID();
                                editor_value_ComboBox.store.loadData(data_editor_value_FeatureID);
                                break; //for FeatureID
                            case 'T_Type':
                                loadTestType();
                                editor_value_ComboBox.store.loadData(data_editor_value_TestType);
                                break; //for TestType
                            case 'product':
                                editor_value_ComboBox.store.loadData(data_editor_value_Product);
                                break; //for TestType
                            case 'Language':
                                loadLanguageList();
                                editor_value_ComboBox.store.loadData(data_editor_value_Language);
                                break; //for Language
                            case 'T_Status':
                                //                            loadT_Status();
                                editor_value_ComboBox.store.loadData(data_editor_value_Status);
                                break; //for Status
                            case 'Flavour':
                                loadFlavour();
                                editor_value_ComboBox.store.loadData(data_editor_value_Flavour);
                                break; //for Flavour
                            case 'Task':
                                loadTask();
                                editor_value_ComboBox.store.loadData(data_editor_value_Task);
                                break; //for Task
                            case 'isAutomated':
                                //                            loadTask();
                                editor_value_ComboBox.store.loadData(data_editor_value_isAutomated);
                                break; //for Task
                        }

                    }

                }

            }
            else {

                grid.getColumnModel().setEditable(0, false);
                grid.getColumnModel().setEditable(1, false);
                grid.getColumnModel().setEditable(2, false);
                grid.getColumnModel().setEditable(3, false);
            }
        };

        /*handler of selecting row*/
        /*to make selected row continous*/
        /*for grouping*/
        var handler_rowselect_queryGrid = function (SelectionModel, rowIndex, record) {
            if (SelectionModel.selections.length > 1) {
                var FirstIndex = SelectionModel.grid.store.indexOf(SelectionModel.selections.items[0]);
                var LastIndex = SelectionModel.grid.store.indexOf(record);
                //SelectionModel.selectRange(SelectionModel.selections.items[0].data.Index + 1, SelectionModel.selections.items[SelectionModel.selections.length - 1].data.Index + 1, true);
                //                SelectionModel.deselectRange();
                SelectionModel.selectRange(FirstIndex, LastIndex, true);
            }
        };



        /*Query Editor*/
        var queryGrid = new Ext.grid.EditorGridPanel
        ({
            id: 'queryGrid',
            region: 'north',
            margins: '5 5 0 0',
            split: true,
            collapsible: true,
            clicksToEdit: 1,
            cm: queryColumnModel,
            columnLines: true,
            store: queryStore,
            //width: 600,
            height: 200,
            title: 'Query Editor',
            autoScroll: true,
            frame: true,
            stripeRows: true,
            //            selType: 'cellmodel',
            selModel: new Ext.grid.RowSelectionModel({
                //                singleSelect: true, 
                moveEditorOnEnter: true,
                listeners:
                {

                    rowselect: handler_rowselect_queryGrid
                }
            }),
            tbar:
            [

                btn_excuteQuery,
                {
                    xtype: 'tbspacer'
                }, // same as ' ' to create Ext.toolbar.Spacer
            // add a vertical separator bar between toolbar items
                '-', // same as {xtype: 'tbseparator'} to create Ext.toolbar.Separator
                btn_appendClause,
                {
                    xtype: 'tbspacer'
                },
                '-',
                btn_deleteClause,
                '-',
                button_MoveUpClause,
                {
                    xtype: 'tbspacer'
                },
                '-',
                button_MoveDownClause,
            ///////////Grouping
            //                button_GroupClauses,
            // begin using the right-justified button container
				'->',
                btn_saveAsQuery,
                {
                    xtype: 'tbspacer'
                },
                '-',
                btn_saveQuery,
                {
                    xtype: 'tbspacer'
                },
                '-',
                btn_cancelChangeQuery

            ],
            //            viewConfig:
            //             {
            //                getRowClass: function(record, index) {
            //                    var c = record.get('Level1');
            //                    switch (c)
            //                        {
            //                            case 1:
            //                                return 'group1';
            //                                break;
            //                            case 2:
            ////                                return 'group2';
            //                                break;
            //                            case 3:
            ////                                return 'group3';
            //                                break;
            //                            case 4:
            ////                                return 'group4';
            //                                break;
            //                            case 5:
            ////                                return 'group5';
            //                                break;
            //                            case 6:
            ////                                return 'group6';
            //                                break;
            //                            case 7:
            //                            
            //                                break;
            //                        }
            //                }
            //            },


            //            bbar: tb_queryGrid,
            listeners:
            {
                //                beforeedit: handler_Grid_beforeedit,
                afteredit: handler_Grid_afteredit,
                cellclick: handler_Grid_cellclick,
                rowclick: handler_Grid_rowclick,
                rowcontextmenu: onContextMenu
                //                beforerender:handler_Grid_beforerender
            }
        });
        //        var queryGrid = new Ext.grid.EditorGridPanel
        //        ({
        //            id: 'queryGrid',
        //            region: 'north',
        //            margins: '5 5 0 0',
        //            split: true,
        //            collapsible: true,
        //            clicksToEdit: 1,
        //            cm: queryColumnModel,
        //            columnLines: true,
        //            store: groupStore,
        //            view: groupView,
        //            iconCls: 'icon-grid',
        //            //width: 600,
        //            height: 200,
        //            title: 'Query Editor',
        //            autoScroll: true,
        //            frame: true,
        //            stripeRows: true,
        //            //            selType: 'cellmodel',
        //            selModel: new Ext.grid.RowSelectionModel({
        //                //                singleSelect: true, 
        //                moveEditorOnEnter: true,
        //                listeners:
        //                {

        //                    rowselect: handler_rowselect_queryGrid
        //                }
        //            }),
        //            tbar:
        //            [

        //                btn_excuteQuery,
        //                {
        //                    xtype: 'tbspacer'
        //                }, // same as ' ' to create Ext.toolbar.Spacer
        //            // add a vertical separator bar between toolbar items
        //                '-', // same as {xtype: 'tbseparator'} to create Ext.toolbar.Separator
        //                btn_appendClause,
        //                {
        //                    xtype: 'tbspacer'
        //                },
        //                '-',
        //                btn_deleteClause,
        //                '-',
        //                button_MoveUpClause,
        //                {
        //                    xtype: 'tbspacer'
        //                },
        //                '-',
        //                button_MoveDownClause,
        //            ///////////Grouping
        //                button_GroupClauses,
        //                button_UngroupClauses,
        //            // begin using the right-justified button container
        //				'->',
        //                btn_saveAsQuery,
        //                {
        //                    xtype: 'tbspacer'
        //                },
        //                '-',
        //                btn_saveQuery,
        //                {
        //                    xtype: 'tbspacer'
        //                },
        //                '-',
        //                btn_cancelChangeQuery

        //            ],
        //            //            bbar: tb_queryGrid,
        //            listeners:
        //            {
        //                //                beforeedit: handler_Grid_beforeedit,
        //                afteredit: handler_Grid_afteredit,
        //                cellclick: handler_Grid_cellclick,
        //                rowclick: handler_Grid_rowclick,
        //                rowcontextmenu: onContextMenu
        //                //                beforerender:handler_Grid_beforerender
        //            }
        //        });
        //#endregion
        //#endregion
        //'View Results' 


        //#region View Results
        //#region View Results in new tab
        var windowObjectReference = null; // global variable
        var PreviousUrl; /* global variable which will store the
                    url currently in the secondary window */

        function openRequestedSinglePopup(strUrl) {
            if (windowObjectReference == null || windowObjectReference.closed) {
                windowObjectReference = window.open(strUrl, '_blank');
            } else if (PreviousUrl != strUrl) {
                windowObjectReference = window.open(strUrl, '_blank'); //"SingleSecondaryWindowName", "resizable=yes,scrollbars=yes,status=yes,'_blank'"
                /* if the resource to load is different,
                then we load it in the already opened secondary window and then
                we bring such window back on top/in front of its parent window. */
                windowObjectReference.focus();
            } else {
                windowObjectReference.focus();
            };

            PreviousUrl = strUrl;
            /* explanation: we store the current url in order to compare url
            in the event of another call of this function. */
        }


        //        function poponload() {
        //            //            testwindow = window.open("", "mywindow", "location=1,status=1,scrollbars=1,width=100,height=100");
        //            //            testwindow.moveTo(0, 0);
        //            //            window.open('index.html', '_newtab');
        //            //            window.open(ct.getNewHref(), '_newtab' + Math.floor(Math.random() * 999999));
        //            var url = 'Home';
        //            var wname = 'companyWeb';
        //            var wfeatures = 'menubar=yes,resizable=yes,scrollbars=yes,status=yes,location=yes';
        ////            window.open(url, wname, wfeatures);

        //        function openRequestedSinglePopup(strUrl) {
        //            if (windowObjectReference == null || windowObjectReference.closed)
        //            /* if the pointer to the window object in memory does not exist
        //            or if such pointer exists but the window was closed */
        //            {
        //                windowObjectReference = window.open(strUrl, '_blank');
        //                /* then create it. The new window will be created and
        //                will be brought on top of any other window. */
        //            }
        //            else {
        //                windowObjectReference.focus();
        //                /* else the window reference must exist and the window
        //                is not closed; therefore, we can bring it back on top of any other
        //                window with the focus() method. There would be no need to re-create
        //                the window or to reload the referenced resource. */
        //            }
        //        };


        //        function openRequestedPopup(strUrl, strWindowName) {
        //  if(windowObjectReference == null || windowObjectReference.closed) {
        //    windowObjectReference = window.open(strUrl, strWindowName,
        //           "resizable,scrollbars,status");
        //  } else {
        //    windowObjectReference.focus();
        //  };

        //#endregion
        //#region paging tool
        //#region TextField for page size
        /*the handler of losing curson on "Amount per page"text field*/
        var handler_blur_numF_Paging_PageSize = function (field) {
            resultPageSize = (field.getValue() < 30) ? 30 : field.getValue();
            resultPageSize = (resultPageSize > 500) ? 500 : resultPageSize;
            GoToPage(1);



        };

        /*"Amount per page"text field*/
        var numF_Paging_PageSize = new Ext.form.NumberField
        ({
            id: 'numF_Paging_PageSize',
            name: 'numF_Paging_PageSize',
            tooltip: 'Amount per page',
            disabled: true,
            selectOnFocus: true,
            width: 35,

            listeners:
            {
                blur: handler_blur_numF_Paging_PageSize
            }


        });
        //#endregion
        //#region first page
        /*the handler of clicking on "go to First Page"button*/
        var handler_click_btn_Paging_FirstPage = function () {
            GoToPage(1);
        };
        /*"go to First Page"button*/
        var btn_Paging_FirstPage = new Ext.Button
        ({
            id: 'btn_Paging_FirstPage',
            text: '|<<',
            tooltip: 'Go to first page',
            disabled: true,
            listeners:
            {
                click: handler_click_btn_Paging_FirstPage
            }
        });
        //#endregion
        //#region previous page
        /*the handler of clicking on "go to Previous Page"button*/
        var handler_click_btn_Paging_PrePage = function () {
            GoToPage(currentPage[0] - 1)
        };
        /*"go to Previous Page"button*/
        var btn_Paging_PrePage = new Ext.Button
        ({
            id: 'btn_Paging_PrePage',
            text: '<-',
            tooltip: 'Go to previous page',
            disabled: true,
            listeners:
            {
                click: handler_click_btn_Paging_PrePage
            }


        });
        //#endregion
        //#region TextField for navigating to specific page
        /*the handler of losing curson on "Go to page"text field*/
        var handler_blur_numF_Paging_searchPage = function (numberField) {
            GoToPage(numberField.getValue())
        };
        /*"search Page"text field*/
        var numF_Paging_searchPage = new Ext.form.NumberField
        ({
            id: 'numF_Paging_searchPage',
            name: 'numF_Paging_searchPage',
            tooltip: 'Go to page',
            disabled: true,
            selectOnFocus: true,
            width: 20,

            listeners:
            {
                blur: handler_blur_numF_Paging_searchPage
            }


        });
        //#endregion
        //#region lable to display total page
        var lbl_Paging_TotalPage = new Ext.form.Label
        ({
            id: 'lbl_Paging_TotalPage',
            text: '0'
        });
        //#endregion
        //#region next page
        /*the handler of clicking on "go to next Page"button*/
        var handler_click_btn_Paging_NextPage = function () {
            GoToPage(currentPage[0] + 1)
        };
        /* "go to next Page"button*/
        var btn_Paging_NextPage = new Ext.Button
        ({
            id: 'btn_Paging_NextPage',
            text: '->',
            tooltip: 'Go to Next page',
            disabled: true,
            listeners:
            {
                click: handler_click_btn_Paging_NextPage
            }


        });
        //#endregion
        //#region last page
        /*the handler of clicking on "go to last Page"button*/
        var handler_click_btn_Paging_LastPage = function () {
            GoToPage(lastPage[0])
        };


        /*"go to last Page"button*/
        var btn_Paging_LastPage = new Ext.Button
        ({
            id: 'btn_Paging_LastPage',
            text: '>>|',
            tooltip: 'Go to last page',
            disabled: true,
            listeners:
            {
                click: handler_click_btn_Paging_LastPage
            }
        });
        //#endregion
        //#region lable for dispaly other information
        var lbl_Paging_displayInfo = new Ext.form.Label
        ({
            id: 'lbl_Paging_displayInfo',
            text: 'No data to display'//'Displaying 1-10 of 1000'
        });
        //#endregion
        //#region paging tool




        var bbar_Paging_queryResultGrid = new Ext.Toolbar({
            width: 600,
            height: 80,
            items:
            [
                "PageSize(30-500):",
                numF_Paging_PageSize,
                {
                    xtype: 'tbspacer',
                    width: 10
                }, // add a 50px space
                btn_Paging_FirstPage,

               {
                   xtype: 'tbspacer',
                   width: 10
               }, // add a 50px space

                btn_Paging_PrePage,
            // add a vertical separator bar between toolbar items
                '-', // same as {xtype: 'tbseparator'} to create Ext.toolbar.Separator
                'Page',
                numF_Paging_searchPage,
                'of',

                {
                    xtype: 'tbspacer',
                    width: 10
                }, // add a 50px space

                lbl_Paging_TotalPage,

                {
                    xtype: 'tbspacer',
                    width: 10
                }, // add a 50px space

               btn_Paging_NextPage,

               {
                   xtype: 'tbspacer',
                   width: 10
               }, // add a 50px space

                btn_Paging_LastPage,
            // begin using the right-justified button container
                '->', // same as { xtype: 'tbfill' }
                lbl_Paging_displayInfo

            ]
        });
        //#endregion
        //#endregion
        //#region Detail window
        //#region step information
        /*column model using in steps grip panel*/
        var columns_grid_steps =
            new Ext.grid.ColumnModel
            ({
                defaults:
                {
                    sortable: false, autoWidth: false
                },
                columns:
                [
                    {
                        dataIndex: 'Step_Num',
                        header: 'Step #',
                        width: 15
                        //                        hidden: true
                        // instead of specifying filter config just specify filterable=true
                        // to use store's field's type property (if type property not
                        // explicitly specified in store config it will be 'auto' which
                        // GridFilters will assume to be 'StringFilter'
                        //                filterable: true,
                        //               	autoWidth: true
                        //,filter: {type: 'numeric'}
                    }, //, sortable: true},
                    {
                    dataIndex: 'TR_Num',
                    header: 'TR_Num',
                    hidden: true
                },
                    {
                        id: 'StepDetail',
                        dataIndex: 'StepDetail',
                        header: 'StepDetail',
                        //                filterable: true,
                        width: 100
                    },
                    {
                        dataIndex: 'ExpectedResult',
                        header: 'ExpectedResult',
                        width: 100
                    },
                    {
                        dataIndex: 'Checked',
                        header: 'Checked',
                        id: 'Checked',
                        width: 100,
                        autoWidth: true
                    }
                ]
            });

        /*record model using in the data reader of store */
        var Record_grid_steps = Ext.data.Record.create
            (
                [
                    {
                        name: 'Step_Num',
                        type: 'string'
                    },
                    {
                        name: 'TR_Num',
                        type: 'int'
                    },
                    {
                        name: 'StepDetail',
                        type: 'string'
                    },
                    {
                        name: 'ExpectedResult',
                        type: 'string'
                    },
                    {
                        name: 'Checked',
                        type: 'string'
                    },
                    {
                        name: 'Comments',
                        type: 'string'
                    }
                ]
            );
        /*the data reader using in the store */
        var reader_grid_steps = new Ext.data.JsonReader({
            type: 'json',
            totalProperty: 'total',
            successProperty: 'success',
            root: 'data'
        }, Record_grid_steps);

        /*the store of step grid panel*/
        var store_grid_steps = new Ext.data.Store
            ({
                id: 'store_grid_steps',
                reader: reader_grid_steps
            });



        /*the step panel of Detail Window*/
        var grid_steps = new Ext.grid.GridPanel
            ({
                id: 'grid_steps',
                //columnLines: true,
                stripeRows: true,
                frame: true,
                split: true,
                store: store_grid_steps,
                height: 200,

                colspan: 7,
                width: 960,
                cm: columns_grid_steps,
                viewConfig:
                    {
                        forceFit: true,
                        enableRowBody: true,
                        getRowClass: function (record, rowIndex, p, store) {
                            p.body =
                            '<b>' + record.get('Comments') + '</b>';
                            return 'x-grid3-row-expanded';
                        }
                    }

            });



        //#endregion
        //#region other information
        /*create a form panel with text field*/
        /*used to display information for Test Run #,Test Case #,Status,Type*/
        /*Component,Task,OS,Created By,Date Created,Last Modified By and Date Modified */
        /*invoked by createPn_StepsInfo*/
        var createFmPn_txtf = function (label, ID, Disabled, Value) {
            return new Ext.form.FormPanel
                    ({
                        id: ID,

                        defaultType: 'textfield',

                        items:
                        [
                            { labelStyle:
                             'font-size: 12px;'
                             + 'width: 100px;'
                            + 'height:15px;'
                            + 'text-align:left;'
                            + 'padding-right:2px;',
                                value: Value,
                                fieldLabel: label,
                                width: '88%',
                                disabled: Disabled
                            }
                        ]

                    });
        };
        //#endregion
        //#region other information
        /*create a form panel with text field*/
        /*used to display information for Test Run #,Test Case #,Status,Type*/
        /*Component,Task,OS,Created By,Date Created,Last Modified By and Date Modified */
        /*invoked by createPn_StepsInfo*/
        var createFmPn_txtf_colspan = function (label, ID, Disabled, Value, Colspan) {
            return new Ext.form.FormPanel
                    ({
                        id: ID,

                        defaultType: 'textfield',
                        colspan: Colspan,
                        items:
                        [
                            { labelStyle:
                             'font-size: 12px;'
                             + 'width: 100px;'
                            + 'height:15px;'
                            + 'text-align:left;'
                            + 'padding-right:2px;',
                                value: Value,
                                fieldLabel: label,
                                width: '96%',
                                disabled: Disabled
                            }
                        ]

                    });
        };
        /*create a form panel with text Area*/
        /*the column span can be set if it is used in column layout*/
        /*used to display information for Variants,Folders,Problem Statement,Partial Fail Notes and Summary*/
        /*invoked by createPn_StepsInfo*/
        var createFmPn_txtA_colspan = function (label, ID, Disabled, Colspan, Value) {
            return new Ext.form.FormPanel
                    ({
                        id: ID,
                        labelWidth: 100,
                        labelAlign: 'top',
                        colspan: Colspan,
                        defaultType: 'textarea',

                        items:
                        [
                            {
                                labelStyle:
                             'font-size: 12px;'
                            + 'height:15px;'
                            + 'text-align:left;'
                             + 'padding-right:2px',

                                value: Value,
                                fieldLabel: label,
                                width: '98%',
                                disabled: Disabled
                            }
                        ]

                    });
        };
        /*create a form panel with check box*/
        /*the column span can be set if it is used in column layout*/
        /*used to display information for Is Automated*/
        /*invoked by createPn_StepsInfo*/
        var createFmPn_CKB_colspan = function (label, ID, Disabled, Colspan, Checked) {
            return new Ext.form.FormPanel
            ({
                id: ID,
                labelWidth: 100,
                labelAlign: 'right',
                colspan: Colspan,
                defaultType: 'checkbox',
                items:
                [
                    {
                        labelStyle:
                     'font-size: 12px;'
                    + 'height:15px;'
                    + 'text-align:left',
                        checked: Checked,
                        fieldLabel: label,
                        width: '95%',
                        disabled: Disabled
                    }
                ]

            });
        };
        /*create a panel with Lable*/
        /*the column span can be set if it is used in column layout*/
        /*used to lable*/
        /*invoked by createPn_StepsInfo*/
        var createPn_LBL_colspan = function (Text, ID, Colspan) {


            return new Ext.Panel
            ({
                id: ID,
                colspan: Colspan,
                defaultType: 'label',
                style: 'font-weight:bold;'
                     + 'font-size: 25px;'
                    + 'height:50px;'
                    + 'text-align:center',

                items:
                [
                    {
                        text: Text,
                        width: '95%'
                    }
                ]

            });
        };
        /*create a panel with blank panel*/
        /*the column span can be set if it is used in column layout*/
        /*used as the space between two columns*/
        /*invoked by createPn_StepsInfo*/
        var createPn_blank_colspan = function (Colspan) {


            return new Ext.Panel
            ({
                width: 1,
                colspan: Colspan
            });
        };

        /*create a panel to manage all data items*/
        /*invoked by CreateWin_StepsInfo*/
        var createPn_StepsInfo = function (stepsData) {
            var str_T_Variants = stepsData.T_Variants.replace(/^[ ]+|[ ]+$/g, '');

            var partsOfStr_T_Variants = str_T_Variants.split(';');
            var list_str_T_Variants = '';

            if (str_T_Variants.length > 0) {

                for (var i = 0; i < partsOfStr_T_Variants.length; i++) {

                    list_str_T_Variants += '-' + partsOfStr_T_Variants[i] + '\n';

                }
            }

            var str_Folders = stepsData.Folders.replace(/^[ ]+|[ ]+$/g, '');

            var partsOfStr_Folders = str_Folders.split(';');
            var list_str_Folders = '';

            if (str_Folders.length > 0) {

                for (var i = 0; i < partsOfStr_Folders.length; i++) {

                    list_str_Folders += '-' + partsOfStr_Folders[i] + '\n';

                }
            }


            var lbl_wintitle = stepsData.product + " "
                    + stepsData.Build + "\n"
                    + stepsData.env_IDEA_Encoding + " "
                    + stepsData.Flavour + " "
                    + stepsData.Language;


            return new Ext.Panel({

                id: 'Pn_StepsInfo',
                frame: true,
                //split: true,
                //autoScroll: false,
                //margins: '5 5 0 0',
                layout:
                        {
                            type: 'table',
                            // The total column count must be specified here
                            columns: 7,
                            width: 1200
                        },
                items:
                        [
                ////////////////top row /////////////////////////

                            createPn_LBL_colspan(lbl_wintitle, "lbl_wintitle", 7),

                ////////////////first row////////////////////////
                            createFmPn_txtf("Test Run #", "FmPn_txtf_TR_Num", true, stepsData.TR_Num),
                            createPn_blank_colspan(1),

                            createFmPn_txtf("Test Case #", "FmPn_txtf_TC_Num", true, stepsData.TC_Num),
                            createPn_blank_colspan(1),

                            createFmPn_txtf("Status", "FmPn_txtf_T_Status", true, stepsData.T_Status),
                            createPn_blank_colspan(1),

                            createFmPn_txtf("Type", "FmPn_txtf_T_Type", true, stepsData.T_Type),
                ////////////////second row////////////////////////

                            createFmPn_txtf("OS", "FmPn_txtf_env_OS", true, stepsData.env_OS),
                            createPn_blank_colspan(1),
                            createFmPn_txtf("User Type", "FmPn_txtf_env_User_Type", true, stepsData.User_Type),
                            createPn_blank_colspan(1),
                            createFmPn_CKB_colspan("Is Automated", "FmPn_txtf_isAutomated", true, 1, stepsData.isAutomated),
                            createPn_blank_colspan(1),
                            createFmPn_txtf("Estimated Time", "FmPn_txtf_Estimated_Time", true, stepsData.Estimated_Time.toString().toHHMMSS()),
                ////////////////third row////////////////////////
                            createFmPn_txtf("Created By", "FmPn_txtf_TR_Created_By", true, stepsData.TR_Created_By),
                            createPn_blank_colspan(1),
                            createFmPn_txtf("Date Created", "FmPn_txtf_TR_Date_Created", true, stepsData.TR_Date_Created.dateFormat('d/m/Y')),
                            createPn_blank_colspan(1),
                            createFmPn_txtf("Last Modified By", "FmPn_txtf_TR_Last_Mod_By", true, stepsData.TR_Last_Mod_By),
                            createPn_blank_colspan(1),
                            createFmPn_txtf("Date Modified", "FmPn_txtf_TR_Date_Last_Mod", true, stepsData.TR_Date_Last_Mod.dateFormat('d/m/Y')),
                ////////////////forth row////////////////////////   
                            createFmPn_txtf_colspan("Component", "FmPn_txtf_T_Main_Component", true, stepsData.T_Main_Component, 3),
                            createPn_blank_colspan(1),
                            createFmPn_txtf_colspan("Task", "FmPn_txtf_Task", true, stepsData.Task, 3),
                //                    createFmPn_CKB_colspan("Is Automated", "FmPn_txtf_isAutomated", true, 2, stepsData.isAutomated),
                //                    createPn_blank_colspan(2),
                //                    createFmPn_txtf("Estimated Time", "FmPn_txtf_Estimated_Time", true, stepsData.Estimated_Time.toString().toHHMMSS()),
                //                    createPn_blank_colspan(2),
                //////////////////////////////
                            createFmPn_txtA_colspan("Summary", "FmPn_txtf_T_Summary", true, 7, stepsData.T_Summary),

                ////////////////sixth row//////////////////////// 
                            createFmPn_txtA_colspan("Problem Statement", "FmPn_txtf_ProblemStatement", true, 3, stepsData.ProblemStatement),
                            createPn_blank_colspan(1),
                            createFmPn_txtA_colspan("Partial Fail Notes", "FmPn_txtf_PartialFailNotes", true, 3, stepsData.PartialFailNotes),
                ////////////////seventh row//////////////////////// 
                            {
                            labelStyle:
                                 'font-size: 12px;'
                                + 'height:70px;'
                                + 'text-align:center',
                            xtype: 'label',
                            text: "Steps:"

                        },

                            createPn_blank_colspan(6),


                ////////////////eighth row//////////////////////// 
                            grid_steps,


                ////////////////fifth row//////////////////////// 
                            createFmPn_txtA_colspan("Variants", "FmPn_txtf_T_Variants", true, 3, list_str_T_Variants), //stepsData.T_Variants),
                            createPn_blank_colspan(1),
                            createFmPn_txtA_colspan("Folders", "FmPn_txtf_Folders", true, 3, list_str_Folders) //stepsData.Folders),

                //        createFmPn_txtf("Type","FmPn_txtf_T_Type",true,stepsData.T_Type),




                        ]
            });
        };
        /*update all the data displyed on each componenet of Detail window*/
        /*used by function updatePn_StepsInfo*/
        var updateFmPn_field = function (id, newValue) {

            var field = Ext.getCmp(id);
            field.items.items[0].setValue(newValue);
        };

        /*Update the title of the detail window*/
        var updatePn_LBL_title = function (id, newTitle) {

            var field = Ext.getCmp(id);
            field.items.items[0].setText(newTitle);
        };
        /*a function to invoke a serious functions to update the informaiton */
        var updatePn_StepsInfo = function (stepsData) {

            var str_T_Variants = stepsData.T_Variants.replace(/^[ ]+|[ ]+$/g, '');

            var partsOfStr_T_Variants = str_T_Variants.split(';');
            var list_str_T_Variants = '';

            if (str_T_Variants.length > 0) {

                for (var i = 0; i < partsOfStr_T_Variants.length; i++) {

                    list_str_T_Variants += '-' + partsOfStr_T_Variants[i] + '\n';

                }
            }

            var str_Folders = stepsData.Folders.replace(/^[ ]+|[ ]+$/g, '');

            var partsOfStr_Folders = str_Folders.split(';');
            var list_str_Folders = '';

            if (str_Folders.length > 0) {

                for (var i = 0; i < partsOfStr_Folders.length; i++) {

                    list_str_Folders += '-' + partsOfStr_Folders[i] + '\n';

                }
            }

            var lbl_wintitle = stepsData.product + " "
                    + stepsData.Build + "\n"
                    + stepsData.env_IDEA_Encoding + " "
                    + stepsData.Flavour + " "
                    + stepsData.Language;




            updatePn_LBL_title('lbl_wintitle', lbl_wintitle);
            updateFmPn_field('FmPn_txtf_TR_Num', stepsData.TR_Num);
            updateFmPn_field('FmPn_txtf_TR_Num', stepsData.TR_Num);
            updateFmPn_field('FmPn_txtf_TC_Num', stepsData.TC_Num);
            updateFmPn_field('FmPn_txtf_T_Status', stepsData.T_Status);
            updateFmPn_field('FmPn_txtf_T_Type', stepsData.T_Type);
            updateFmPn_field('FmPn_txtf_T_Main_Component', stepsData.T_Main_Component);
            updateFmPn_field('FmPn_txtf_Task', stepsData.Task);
            updateFmPn_field('FmPn_txtf_env_OS', stepsData.env_OS);
            updateFmPn_field('FmPn_txtf_env_User_Type', stepsData.User_Type);
            updateFmPn_field('FmPn_txtf_TR_Created_By', stepsData.TR_Created_By);
            updateFmPn_field('FmPn_txtf_TR_Date_Created', stepsData.TR_Date_Created.dateFormat('d/m/Y'));
            updateFmPn_field('FmPn_txtf_TR_Last_Mod_By', stepsData.TR_Last_Mod_By);
            updateFmPn_field('FmPn_txtf_TR_Date_Last_Mod', stepsData.TR_Date_Last_Mod.dateFormat('d/m/Y'));
            updateFmPn_field('FmPn_txtf_isAutomated', stepsData.isAutomated);
            updateFmPn_field('FmPn_txtf_Estimated_Time', stepsData.Estimated_Time.toString().toHHMMSS());
            updateFmPn_field('FmPn_txtf_T_Variants', list_str_T_Variants);
            updateFmPn_field('FmPn_txtf_Folders', list_str_Folders);
            updateFmPn_field('FmPn_txtf_ProblemStatement', stepsData.ProblemStatement);
            updateFmPn_field('FmPn_txtf_PartialFailNotes', stepsData.PartialFailNotes);
            updateFmPn_field('FmPn_txtf_ProblemStatement', stepsData.ProblemStatement);
            updateFmPn_field('FmPn_txtf_T_Summary', stepsData.T_Summary);

            //        updateFmPn_CKB();
            //        updateFmPn_txtA();

        };


        /*funciton to invoke createPn_StepsInfo to create a panel with components to display data */
        var CreateWin_StepsInfo = function (stepsData) {

            //            if (Win_StepsInfo == undefined) {
            Win_StepsInfo = new Ext.Window({
                //                    id: 'Win_StepsInfo',
                title: 'Test Case Details',
                //modal: true, // <-- breaks parents modal 
                //state if sub window is modal, 
                //in addition the sub window is 
                //not properly modal because the 
                //parent window is not blocked
                closable: true,
                closeAction: 'hide',
                autoScroll: true,
                //                    draggable: false,
                y: 80,
                width: 1000,
                height: 700,
                resizable: false,
                style:
                {
                    border: '1px solid #fff'


                },
                items:
                [

                    createPn_StepsInfo(stepsData)

                ]

            });
            //            }
            //            else {

            updatePn_StepsInfo(stepsData);
            //            }
            //        Win_StepsInfo.render(); // render first
            return Win_StepsInfo;

        };
        //#endregion
        //#endregion


        //#region to excel



        //        var exportCSV = new Ext.ux.Exporter.Button({
        //            component: queryResultGrid,
        //            text: 'Download as .xls'
        //        });
        var tbar_queryResultGrid = new Ext.Toolbar({
            //            width: 600,
            //            height: 80,
            items:
            [
            //                exportCSV
            ]
        });




        //#endregion
        //#region View Results
        /*column model of View Result*/
        /*used in View Result*/
        var columns_queryResultGrid =
        new Ext.grid.ColumnModel
        ({
            defaults:
            {
                sortable: true
                //                , autoWidth: true
            },
            columns:
            [
            //            {
            //                dataIndex: 'TestRun_DataID',
            //                header: 'TestRun_DataID',
            //                hidden: true
            //                // instead of specifying filter config just specify filterable=true
            //                // to use store's field's type property (if type property not
            //                // explicitly specified in store config it will be 'auto' which
            //                // GridFilters will assume to be 'StringFilter'
            //                //                filterable: true,
            //                //               	autoWidth: true
            //                //,filter: {type: 'numeric'}
            //            }, //, sortable: true},
                    {
                    dataIndex: 'TR_Num',
                    header: 'Test Run Number'
                    //                filterable: true,
                    //               	autoWidth: true
                },
                {
                    dataIndex: 'TC_Num',
                    header: 'Test Case Number',
                    hidden: true
                    //                    autoWidth: true
                },
                {
                    dataIndex: 'T_Summary',
                    header: 'Summary',
                    id: 'T_Summary'
                },
                {
                    dataIndex: 'T_Type',
                    header: 'Type',
                    id: 'T_Type',
                    hidden: true
                },
                {
                    dataIndex: 'T_Main_Component',
                    header: 'Main Component',
                    id: 'T_Main_Component'
                    //               hidden: true
                },
                {
                    dataIndex: 'T_Feature_ID',
                    header: 'Feature ID',
                    id: 'T_Feature_ID'
                    //                hidden: true
                },
                {
                    dataIndex: 'env_IDEA_Encoding',
                    header: 'IDEA Encoding',
                    id: 'env_IDEA_Encoding',
                    hidden: true
                },
                {
                    dataIndex: 'env_OS',
                    header: 'OS',
                    id: 'env_OS',
                    hidden: true
                },
                {
                    dataIndex: 'env_User_Type',
                    header: 'User Type',
                    id: 'env_User_Type',
                    hidden: true
                },
                {
                    dataIndex: 'T_Status',
                    header: 'Status'
                    //                hidden: true
                },
                {
                    dataIndex: 'TR_Created_By',
                    header: 'Created By',
                    id: 'TR_Created_By',
                    hidden: true
                },
                {
                    dataIndex: 'TR_Date_Created',
                    header: 'Date Created',
                    hidden: true,
                    renderer: Ext.util.Format.dateRenderer('m/d/Y')
                },
                {
                    dataIndex: 'TR_Last_Mod_By',
                    header: 'Last Modified By',
                    id: 'TR_Last_Mod_By',
                    hidden: true
                },
                {
                    dataIndex: 'TR_Date_Last_Mod',
                    header: 'Date Modified',
                    hidden: true,
                    //                filter: true,
                    renderer: Ext.util.Format.dateRenderer('m/d/Y')
                },
                {
                    dataIndex: 'isAutomated',
                    header: 'IsAutomated',
                    hidden: true

                },
                {
                    dataIndex: 'product',
                    header: 'Product',
                    hidden: true

                },
                {
                    dataIndex: 'Estimated_Time',
                    header: 'Estimated Time',
                    hidden: true

                },
                {
                    dataIndex: 'T_Variants',
                    header: 'Variants',
                    hidden: true

                },
                {
                    dataIndex: 'ProblemStatement',
                    header: 'Problem Statement',
                    hidden: true

                },
                {
                    dataIndex: 'Build',
                    header: 'Build'
                    //                hidden: true

                },
                {
                    dataIndex: 'PartialFailNotes',
                    header: 'Partial Fail Notes',
                    hidden: true

                },
                {
                    dataIndex: 'Folders',
                    header: 'Folders',
                    hidden: true

                },
                {
                    dataIndex: 'Language',
                    header: 'Language',
                    hidden: true

                },
                {
                    dataIndex: 'Flavour',
                    header: 'Flavour'
                    //                hidden: true

                },
                {
                    dataIndex: 'Task',
                    header: 'Task'
                    //                hidden: true

                }
            ]

        });

        /*record model for the data of View Result*/
        /*used in the reader of the store*/
        var Record_TestRunData = Ext.data.Record.create
        (
            [
                {
                    name: 'TestRun_DataID',
                    type: 'int'
                },
                {
                    name: 'TR_Num',
                    type: 'int'
                },
                {
                    name: 'TC_Num',
                    type: 'int'
                },
                {
                    name: 'T_Summary',
                    type: 'string'
                },
                {
                    name: 'T_Type',
                    type: 'string'
                },
                {
                    name: 'T_Main_Component',
                    type: 'string'
                },
                {
                    name: 'T_Feature_ID',
                    type: 'string'
                },
                {
                    name: 'env_IDEA_Encoding',
                    type: 'string'
                },
                {
                    name: 'env_OS',
                    type: 'string'
                },
                {
                    name: 'env_User_Type',
                    type: 'string'
                },
                {
                    name: 'T_Status',
                    type: 'string'
                },
                {
                    name: 'TR_Created_By',
                    type: 'string'
                },
                {
                    name: 'TR_Date_Created',
                    type: 'date',
                    dateFormat: 'M$'
                },
                {
                    name: 'TR_Last_Mod_By',
                    type: 'string'
                },
                {
                    name: 'TR_Date_Last_Mod',
                    type: 'date',
                    dateFormat: 'M$'
                },
                {
                    name: 'product',
                    type: 'string'
                },
                {
                    name: 'isAutomated', //isAutomated
                    type: 'boolean'
                },
                {
                    name: 'Estimated_Time',
                    type: 'int'
                },
                {
                    name: 'T_Variants',
                    type: 'string'
                },

                {
                    name: 'ProblemStatement',
                    type: 'string'
                },
                {
                    name: 'Build',
                    type: 'string'
                },
                {
                    name: 'PartialFailNotes',
                    type: 'string'
                },
                {
                    name: 'Folders',
                    type: 'string'
                },
                {
                    name: 'Language',
                    type: 'string'
                },
                {
                    name: 'Flavour',
                    type: 'string'
                },
                {
                    name: 'Task',
                    type: 'string'
                }
            ]
        );
        /*recorder for the store of View Result*/
        /*used in the store*/
        var reader = new Ext.data.JsonReader({
            type: 'json',
            totalProperty: 'total',
            successProperty: 'success',
            root: 'data'
        }, Record_TestRunData);


        /*the store of View Result*/
        /*used in the View Results panel*/
        var store_TestRunData = new Ext.data.Store
        ({
            id: 'store_TestRunData',
            reader: reader
        });



        /*handler of double clicking on a record of View Result panel*/
        var handler_rowdblclick_queryResultGrid = function (grid, rowIndex, e) {
            // manually trigger the data store load

            var record = grid.getStore().getAt(rowIndex);

            var VSteps = Ext.getCmp('grid_steps');
            Ext.Ajax.request
                    ({
                        url: 'Load_Steps',
                        params:
                        {
                            TestRun_DataID: record.data.TestRun_DataID
                        },
                        //                method: 'POST',
                        success: function (result, request) {

                            var jsonData = Ext.decode(result.responseText);
                            var stepNumber = 1;
                            for (var i = 0; i < jsonData.data.length; i++) {
                                var comments = jsonData.data[i].Comments.replace(/^[ ]+|[ ]+$/g, '');

                                if (comments.length > 0) {
                                    jsonData.data[i].Comments = "Comment: " + comments;
                                    jsonData.data[i].Step_Num = "";
                                }
                                else {
                                    jsonData.data[i].Step_Num = stepNumber++;
                                }
                            }
                            VSteps.store.loadData(jsonData);

                            //                            var WinStepsInfo = CreateWin_StepsInfo(record.data);
                            //                            WinStepsInfo.show();
                            //                            WinStepsInfo.center();
                            openRequestedSinglePopup('detail?Product=' + record.data.product + '&testRunNum=' + record.data.TR_Num);
                            //                            poponload();


                        },
                        failure: function (result, request) {
                            Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                        }
                    });





        };

        var onHeaderClick = function (grid, columnIndex, e) {
            //            var view = grid.getView(),
            //            header = view.findHeaderCell(view.activeHdRef),
            //            c = header.style.cursor;

            //            return !(c === "col-resize" || c === "move" || c === "e-resize" || c === "w-resize");

            var view = grid.getView(),
                store = grid.getStore(),
                colModel = grid.getColumnModel(),
                cell,
                width;
            if (Math.abs(e.getPageX() - Ext.get(view.getHeaderCell(columnIndex)).getX()) < 20) {
                columnIndex = columnIndex > 0 ? columnIndex - 1 : 0; // to resize column on left
            }
            width = Ext.get(view.getHeaderCell(columnIndex)).child(".x-grid3-hd-inner").getTextWidth();

            if (Ext.isChrome && colModel.config[columnIndex].commands) return; // Chrome has problem with resizing commandcolumn
            if (store.sortInfo && store.sortInfo.field == colModel.config[columnIndex].dataIndex) {
                width += 15; // 15px + for sorting arrows
            }
            store.each(function (record, rowIdx) {
                cell = Ext.get(view.getCell(rowIdx, columnIndex));
                width = Math.max(width, cell.child(".x-grid3-cell-inner").getTextWidth());
            });
            colModel.setColumnWidth(columnIndex, width + 10);
            grid.autoExpandColumn = null;
        };

        //        var onDblHeaderClick = function (grid, columnIndex, e) {
        ////            grid.autoExpandColumn = grid.getColumnModel().config[columnIndex].id;
        //            //            grid.getView().autoExpand();
        //            var view = grid.getView();
        //            header = view.getHeaderCell(view.activeHdIndex),
        //            c = header.style.cursor;
        //            return !(c === "col-resize" || c === "move" || c === "e-resize" || c === "w-resize");
        //        };
        /*'View Results'Panel*/
        var queryResultGrid = new Ext.grid.GridPanel({
            id: 'queryResultGrid',
            title: 'View Results',
            region: 'center',
            margins: '0 5 5 0',
            frame: true,
            autoExpandColumn: true,
            collapsible: true,
            split: true,
            store: store_TestRunData,
            //height: '70%',
            stripeRows: true,
            columnLines: true,
            cm: columns_queryResultGrid,
            tbar: tbar_queryResultGrid,
            bbar:
            bbar_Paging_queryResultGrid,
            listeners:
            {
                rowdblclick: handler_rowdblclick_queryResultGrid,
                //                headerdblclick: onDblHeaderClick,
                headerclick: onHeaderClick
            }

        });

        // map one key by key code
        //        var map = new Ext.KeyMap('queryResultGrid', [
        //                {
        //                    key: [10, 13],
        //                    fn: function () { alert("Return was pressed"); }
        //                }, {
        //                    key: "abc",
        //                    fn: function () { alert('a, b or c was pressed'); }
        //                }, {
        //                    key: "\t",
        //                    ctrl: true,
        //                    shift: true,
        //                    fn: function () { alert('Control + shift + tab was pressed.'); }
        //                }
        //            ]
        //        
        //        
        //        
        //        );

        //Create the Download button and add it to the top toolbar
        //        var exportButton = new Ext.ux.Exporter.Button({
        //            component: queryResultGrid,
        //            id: 'exportButton',
        //            text: "Download this page as .xls",
        //            disabled: true

        //        });




        //        queryResultGrid.getTopToolbar().add(exportButton);


        ///////////fortesting
        var testStore = new Ext.data.Store
        ({
            id: 'testStore',


            reader: reader
        });

        ////////////////////////////

        var Base64 = (function () {

            // private property
            var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

            // private method for UTF-8 encoding
            function utf8Encode(string) {
                string = string.replace(/\r\n/g, "\n");
                var utftext = "";
                for (var n = 0; n < string.length; n++) {
                    var c = string.charCodeAt(n);
                    if (c < 128) {
                        utftext += String.fromCharCode(c);
                    }
                    else if ((c > 127) && (c < 2048)) {
                        utftext += String.fromCharCode((c >> 6) | 192);
                        utftext += String.fromCharCode((c & 63) | 128);
                    }
                    else {
                        utftext += String.fromCharCode((c >> 12) | 224);
                        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                        utftext += String.fromCharCode((c & 63) | 128);
                    }
                }
                return utftext;
            }

            // public method for encoding
            return {
                //This was the original line, which tries to use Firefox's built in Base64 encoder, but this kept throwing exceptions....
                // encode : (typeof btoa == 'function') ? function(input) { return btoa(input); } : function (input) {


                encode: function (input) {
                    var output = "";
                    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
                    var i = 0;
                    input = utf8Encode(input);
                    while (i < input.length) {
                        chr1 = input.charCodeAt(i++);
                        chr2 = input.charCodeAt(i++);
                        chr3 = input.charCodeAt(i++);
                        enc1 = chr1 >> 2;
                        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                        enc4 = chr3 & 63;
                        if (isNaN(chr2)) {
                            enc3 = enc4 = 64;
                        } else if (isNaN(chr3)) {
                            enc4 = 64;
                        }
                        output = output +
                keyStr.charAt(enc1) + keyStr.charAt(enc2) +
                keyStr.charAt(enc3) + keyStr.charAt(enc4);
                    }
                    return output;
                }
            };
        })();
        function toCSV(store) {
            var xlCol, field, result = '', separator = '';
            for (xlCol = 0; xlCol < store.fields.length; xlCol++) {
                field = store.fields.itemAt(xlCol).name;
                result += separator + '"' + field + '"';
                separator = '\t';
            }
            result += '\r';
            store.each(function (record) {
                separator = '';
                for (xlCol = 0; xlCol < record.fields.length; xlCol++) {
                    var field = store.fields.itemAt(xlCol).name;
                    //you could make a difference for other types than text
                    result += separator + '"' + record.get(field) + '"';
                    separator = '\t';
                }
                result += '\r';
            });
            return result;
        };

        /*function to load test run history data with page information*/
        /*invoked by function GoToPage and loadbyNodePage_TestRunData*/
        /*invoke loadMask to control dispalying loading mask*/
        var AddAllTestRunDataToExcel_byNodePage = function (queryString, xd, page) {


            var thePage = (page == undefined) ? 1 : page;

            Ext.Ajax.request({
                url: 'LoadPage_TestRunData',
                params:
                        {
                            query: queryString,
                            pageSize: 500,
                            page: thePage
                        },
                //        method: 'GET',
                success: function (result, request) {

                    var jsonData = Ext.decode(result.responseText);



                    //                    if (thePage == 1) {
                    testStore.loadData(jsonData);

                    if (thePage == 1) {
                        Session("aaa") = 'data:application/vnd.ms-excel;base64,';
                    }
                    else {
                        Session("aaa") += (Base64.encode(toCSV(testStore)));
                    }

                    if (jsonData.HasNextPage) {
                        thePage++;
                        AddAllTestRunDataToExcel_byNodePage(queryString, Session("aaa"), thePage);
                    }
                    else {
                        //                        var xd = toCSV(testStore);
                        //                    var xd = toCSV(Ext.getCmp('queryResultGrid').getStore());
                        //                        if (Ext.isIE6 || Ext.isIE7 || Ext.isIE8) { //i'm not sure about IE8
                        //                            window.clipboardData.setData('Text', xd); //confirmation will be asked
                        //                            alert('Now, switch to Excel, position the cursor to where the data are to be inserted and paste the data.');
                        //                        }
                        //                        else if (Ext.isSafari || Ext.isSafari2 || Ext.isSafari3) {
                        //                            //you are on your own here
                        //                        }
                        //                        else {
                        //                            alert(xd.length);
                        //                            //                            document.location = 'data:application/vnd.ms-excel;base64,' + Base64.encode(xd.toString());
                        //                            //                            alert(xd.toString());
                        //                            //                            document.location += Base64.encode(xd[0]);
                        //                            //                            for (var i = 0; i < xd.length; i++) {
                        //                            //                                document.location +=Base64.encode(xd[i]);
                        //                            //                            }
                        //                        }

                        document.location = Session("aaa");
                        Session.Remove("aaa");
                        loadMask.hide();
                    }

                },
                failure: function (result, request) {
                    Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
                    loadMask.hide();
                }
            });



        };

        //        function createFile(queryString) {
        //            Ext.Ajax.request({
        //                url: 'Download',
        //                params:
        //                {
        //                    query: queryString

        //                },
        //                //        method: 'GET',
        //                success: function (result, request) {

        //                },
        //                failure: function (result, request) {
        //                    Ext.MessageBox.alert('Failed', 'Try again, and if the problem persists, see your system administrator. '); // + result.date);
        //                    loadMask.hide();
        //                }
        //            });
        //            //            if (Ext.isIE6 || Ext.isIE7 || Ext.isIE8 || Ext.isIE9 || Ext.isIE10) {
        //            //                var object = new ActiveXObject("Scripting.FileSystemObject");
        //            //                var file = object.CreateTextFile("C:\\Hello.txt", true);
        //            //                file.WriteLine('Hello World');
        //            //                loadMask.hide();
        //            //                alert('Filecreated');
        //            //                file.WriteLine('Hope is a thing with feathers, that perches on the soul.');
        //            //                file.Close();
        //            //            }
        //            //            else if (Ext.isSafari || Ext.isSafari2 || Ext.isSafari3) {
        //            //                //you are on your own here
        //            //            }
        //            //            else {
        //            //                
        //            //            }

        //            //                        var ExcelApp = new ActiveXObject("Excel.Application");
        //            //                        var ExcelSheet = new ActiveXObject("Excel.Sheet");
        //            //                        // Make Excel visible through the Application object.
        //            //                        ExcelSheet.Application.Visible = true;
        //            //                        // Place some text in the first cell of the sheet.
        //            //                        ExcelSheet.ActiveSheet.Cells(1, 1).Value = "This is column A, row 1";
        //            //                        // Save the sheet.
        //            //                        ExcelSheet.SaveAs("C:\\TEST.XLS");
        //            //                        // Close Excel with the Quit method on the Application object.
        //            //                        ExcelSheet.Application.Quit();
        //        };
        var isReload = true;
        function DownloadFiles(query) {
            if (isReload == true) {
                isReload = false;
                SetloadingMark("aaa");

                window.location.reload();
            }
            else {
                isReload = true;
            }
            window.setTimeout("DownloadFiles()", 10000000);
        };
        function createCookie(name, value, days) {
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                var expires = "; expires=" + date.toGMTString();
            }
            else var expires = "";
            document.cookie = name + "=" + value + expires + "; path=/";
        };
        function eraseCookie(name) {
            createCookie(name, "", -1);
        };
        function deleteAllCookies() {
            var cookies = document.cookie.split(";");

            for (var i = 0; i < cookies.length; i++) {
                var cookie = cookies[i];
                var eqPos = cookie.indexOf("=");
                var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
                document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
            }
        };
        function getCookie(c_name) {
            var c_value = document.cookie;
            var c_start = c_value.indexOf(" " + c_name + "=");
            if (c_start == -1) {
                c_start = c_value.indexOf(c_name + "=");
            }
            if (c_start == -1) {
                c_value = null;
            }
            else {
                c_start = c_value.indexOf("=", c_start) + 1;
                var c_end = c_value.indexOf(";", c_start);
                if (c_end == -1) {
                    c_end = c_value.length;
                }
                c_value = unescape(c_value.substring(c_start, c_end));
            }
            return c_value;
        };

        var downloadEndCheck;
        function downloadFinished() {
            window.clearInterval(downloadEndCheck);
            eraseCookie("fileDownloadToken");
            //            alert("DownLoad Completed.");
            //            loadMask.hide();

            //            Ext.getBody().unmask;
            //            deleteAllCookies(); //clear the cookie value
            if (loadMask != undefined) {
                loadMask.hide();
            }
            else {
                //            location.reload();
            }
            //            alert('DownLoad is completed! Click OK.');

        };

        var btn_exportAllButton = new Ext.Button(

            {
                id: 'exportAllButton',
                text: 'Export to Excel...',
                disabled: true,
                handler: function (button, e) {

                    var thegrid = Ext.getCmp('queryGrid');

                    var clauses = new Array();
                    for (var i = 0; i < thegrid.getStore().data.items.length; i++) {
                        if (thegrid.getStore().data.items[i].data.FieldName != undefined) {
                            clauses.push(thegrid.getStore().data.items[i].data);
                        }

                    }

                    var query = GetQueryString(clauses);

                    button.setDisabled(true);

                    //                    var testStore = Ext.getCmp('testStore');

                    //                    var xd ;
                    //AddAllTestRunDataToExcel_byNodePage(query); //"Select * From TestRun_Data Where product = 'idea' AND Build LIKE '%3.3%' AND T_Status = 'Partially Failed' "); // AND Build LIKE '%3.3%' AND T_Status = 'Partially Failed' 
                    //createFile(query);
                    //                               var url = '@Url.Action("testGridView", "Home")';
                    //                            window.location.href = url+"?query=" + query;



                    var url = '@Url.Action("Download", "Home")';
                    var toDownLoadUrl;
                    if (currentQuery == undefined) {
                        toDownLoadUrl = url + "?query=" + query + "&fileName=" + "QueryResultData";
                    }
                    else {

                        toDownLoadUrl = url + "?query=" + query + "&fileName=" + currentQuery.text; // currentQuery.Name;
                    }

                    SetloadingMark("Downloading...");
                    //To check the cookie returned back from the server every one second
                    downloadEndCheck = window.setInterval(function () {
                        //            alert("is checking");
                        var cookieValue = getCookie('fileDownloadToken');
                        if (cookieValue == "finish") {
                            downloadFinished();
                        }

                    }, 1000);
                    window.open(toDownLoadUrl, "_self");
                    //                    Session.Remove("aaa");
                    //                    alert(Session("aaa"));
                    //                    AddAllTestRunDataToExcel_byNodePage(query);




                    //                    SetloadingMark("aaa");

                    //                    window.open(toDownLoadUrl, false);

                    //                    Ext.Ajax.request({
                    //                        url: toDownLoadUrl,
                    //                        success: function () {
                    //                            window.location.reload();
                    //                            loadMask.hide();
                    //                        },
                    //                        failure: function () {
                    //                            // couldn't save... show an error or something.
                    //                        }
                    //                    });


                    //                    if (currentQuery == undefined) {
                    //                        window.location.href = url + "?query=" + query + "&fileName=" + "QueryResultData";
                    //                    }
                    //                    else {

                    //                        window.location.href = url + "?query=" + query + "&fileName=" + currentQuery.text; // currentQuery.Name;
                    //}
                    //                    Ext.getBody().mask("Loading...", "x-loading-mask");
                    //                    window.location.reload();
                    //                    window.location.onLoad = function () {

                    //                        if (loadMask != undefined) {

                    //                            loadMask.hide();
                    //                        }
                    //                    };

                    //                    window.onload = function () {
                    //                        loadMask.hide();
                    //                    }
                    //                    SetloadingMark("aaa");
                    //                    SetloadingMark("aaa");
                    //                    window.onload = function () {
                    //                        alert("I'm the new location and I'm loaded!");
                    //                    };
                    //                    checkLoad();

                    //                    function checkLoad() {
                    //                        if (window.onLoad) {
                    //                            // call form population script
                    //                            loadMask.hide();
                    //                        } else {
                    //                            SetloadingMark("aaa");
                    //                            setTimeout('checkLoad();', 1000)
                    //                        }
                    //                    }
                }

            }

      );



        //            };
        //            var ExportForm = new Ext.form.FormPanel({
        //            id: 'ExportForm',
        //            //                        frame:true,
        //            //                        width:260,     
        //            //                        labelWidth:60,         
        //            //                        defaults: {
        //            //                                width: 165,
        //            //                        },
        //            //                        items: [
        //            //                                new Ext.form.TextField({
        //            //                            id:"username",
        //            //                            fieldLabel:"Username",
        //            //                            allowBlank:false,
        //            //                            blankText:"Enter your username"
        //            //                        }),
        //            //                                new Ext.form.TextField({
        //            //                            id:"password",
        //            //                            fieldLabel:"Password",
        //            //                                        inputType: 'password',
        //            //                            allowBlank:false,
        //            //                            blankText:"Enter your password"
        //            //                        })
        //            //                        ],
        //            buttons: [{
        //                id: 'exportAllButton',
        //                text: 'Export to Excel...',
        ////                disabled: true,
        //                handler: function (button, e) {

        //                    var thegrid = Ext.getCmp('queryGrid');

        //                    var clauses = new Array();
        //                    for (var i = 0; i < thegrid.getStore().data.items.length; i++) {
        //                        if (thegrid.getStore().data.items[i].data.FieldName != undefined) {
        //                            clauses.push(thegrid.getStore().data.items[i].data);
        //                        }

        //                    }

        //                    var query = GetQueryString(clauses);

        //                    button.setDisabled(true);

        //                    //                    var testStore = Ext.getCmp('testStore');

        //                    //                    var xd ;
        //                    //AddAllTestRunDataToExcel_byNodePage(query); //"Select * From TestRun_Data Where product = 'idea' AND Build LIKE '%3.3%' AND T_Status = 'Partially Failed' "); // AND Build LIKE '%3.3%' AND T_Status = 'Partially Failed' 
        //                    //createFile(query);
        //                    //                               var url = '@Url.Action("testGridView", "Home")';
        //                    //                            window.location.href = url+"?query=" + query;
        //                    var url = '@Url.Action("Download", "Home")';
        //                    var toExportUrl;
        //                    if (currentQuery == undefined) {
        //                        //                                                    window.location.href = url + "?query=" + query + "&fileName=" + "QueryResultData";
        //                        toExportUrl = url + "?query=" + query + "&fileName=" + "QueryResultData";

        //                    }
        //                    else {

        //                        //                                                    window.location.href = url + "?query=" + query + "&fileName=" + currentQuery.text; // currentQuery.Name;
        //                        toExportUrl = url + "?query=" + query + "&fileName=" + currentQuery.text; // currentQuery.Name;

        //                    }

        //                    ExportForm.getForm().submit({
        //                        url: toExportUrl,
        //                        waitMsg: 'Processing Request',
        //                        success: function (ExportForm, resp) {
        //                            document.location  = '@Url.Action("Index", "Home")';
        //                        }
        //                    });

        //                }

        //            }]
        //        });


        queryResultGrid.getTopToolbar().add(btn_exportAllButton);




        //////////////////
        //#endregion

        //#endregion

        //#region Query Explorer
        var tree = new Ext.tree.TreePanel
        ({
            id: 'queryTree',
            region: 'west',
            margins: '5 0 5 5',
            collapsible: true,
            title: 'Query Explorer',
            width: 200,
            //    height: '10%',
            autoScroll: true,
            split: true,
            rootVisible: false,
            tbar: tb_queryTree,
            border: true,
            tbarCfg: {
                buttonAlign: 'center'

                //for center align
                // buttonAlign:'left' //for left align
                // buttonAlign:'right' //for right align
            },
            store: store_queryTree,
            contextMenu: contextMenu_Tree,
            listeners:
            {
                click: onTreeNodelClick,
                dblclick: onTreeNodeDblClick,
                contextmenu: onContextMenu_Tree
            },
            loader: Loader_tree
        });
        /*set tree root to Query Explorer*/
        tree.setRootNode(root);
        /*expand the roots by default*/
        root.expand();





        /*to make Query Explorer editable*/
        var treeEditor = new Ext.tree.TreeEditor(tree, {}, {
            cancelOnEsc: true,
            completeOnEnter: true,
            selectOnFocus: true,
            allowBlank: false,
            listeners:
            {

                complete: onTreeEditComplete,
                beforestartedit: //( this, boundEl, value )
                function (editor, boundEl, value) {
                    var thetree = Ext.getCmp('queryTree');
                    var selectnode = thetree.getSelectionModel().getSelectedNode();
                    if (((IsAuthenticated && !IsTeamQuery(selectnode)) || IsManager || IsAdmin) && selectnode.id != 1 && selectnode.id != 2) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
        });
        //#endregion



        //'Query Manage Center'



        //#region Query Explorer



        /*the panel to manage 3 panels*/
        /*using border layout*/
        var myQueryManageCenter =
        new Ext.Panel({
            width: 1500, //'100%', //
            height: 900,
            //            minWidth: 900,
            //            minHeight: 800,
            //                autoHeight:true,
            //            resizable: true,
            //            draggable: true,
            title: 'TestRun History',
            //    region: 'center',
            //            forceFit: true,
            layout: 'border',
            split: true,
            //            {
            //            type: 'hbox',
            //            pack: 'start',
            //            align: 'stretch'
            //        },
            items:
            [

                    tree,
                    {
                        region: 'center',
                        border: false,
                        width: '100%',

                        //                        margins: '5 0 5 5',
                        layout: 'border',
                        items: [queryGrid, queryResultGrid]

                    }
            ]
            //            listeners:
            //            {
            //                resize: function (resizor, width, height, e) {
            //                    //                    var horizontalCenter = Math.floor(window.width() / 2);
            //                    //                    var verticalCener = Math.floor(window.height() / 2);

            //                    //                    var intWidth = window.width();
            //                    //                    var intHeight = window.height();

            //                    //                    var xCenter = intWidth / 2;
            //                    //                    var yCenter = intHeight / 2;
            //                    var intWidth = window.innerWidth;
            //                    var xCenter = (intWidth - myQueryManageCenter.width) / 2;
            //                    //                    var intHeight = document.getElementById("main").hight;
            //                    //                    alert(intWidth);
            //                    myQueryManageCenter.setSize(width, height); //setSize( width, height )
            //                    myQueryManageCenter.setPosition(xCenter, 0); //setPosition( left, top ) //setPagePosition( x, y )
            //                }
            //            }

        });

        var loadManageCenter = function () {
            var intWidth = Ext.getBody().innerWidth;
            var xCenter = (intWidth - myQueryManageCenter.width) / 2;

            var width = Ext.getBody().getViewSize().width - 140;
            var height = Ext.getBody().getViewSize().height - 140;

            myQueryManageCenter.setSize(width, height);

            myQueryManageCenter.setPosition(xCenter, 0);

        };
        Ext.EventManager.onWindowResize(function () {

            loadManageCenter();
        });

        loadManageCenter();
        /* show it*/
        myQueryManageCenter.show();
        /* render it*/
        myQueryManageCenter.render('myQueryManageCenter');
        //#endregion



    });
</script>

